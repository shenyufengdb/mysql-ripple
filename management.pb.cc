// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: management.proto

#include "management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_management_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilePosition_management_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_management_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GTID_management_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_management_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GTIDStartPosition_management_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_management_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MasterInfo_management_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_management_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerVersion_management_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_management_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlaveAddress_management_2eproto;
namespace ripple_proto {
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class StartSlaveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartSlaveRequest> _instance;
} _StartSlaveRequest_default_instance_;
class StopSlaveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopSlaveRequest> _instance;
} _StopSlaveRequest_default_instance_;
class ServerVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerVersion> _instance;
} _ServerVersion_default_instance_;
class FilePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilePosition> _instance;
} _FilePosition_default_instance_;
class GTIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GTID> _instance;
} _GTID_default_instance_;
class GTIDStartPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GTIDStartPosition> _instance;
} _GTIDStartPosition_default_instance_;
class BinlogPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinlogPosition> _instance;
} _BinlogPosition_default_instance_;
class MasterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterInfo> _instance;
} _MasterInfo_default_instance_;
class MasterStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterStatus> _instance;
} _MasterStatus_default_instance_;
class SlaveAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlaveAddress> _instance;
} _SlaveAddress_default_instance_;
class SlavesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Slaves> _instance;
} _Slaves_default_instance_;
class OnOffDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnOff> _instance;
} _OnOff_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class RippleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RippleInfo> _instance;
} _RippleInfo_default_instance_;
}  // namespace ripple_proto
static void InitDefaultsscc_info_BinlogPosition_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_BinlogPosition_default_instance_;
    new (ptr) ::ripple_proto::BinlogPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::BinlogPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BinlogPosition_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_BinlogPosition_management_2eproto}, {
      &scc_info_FilePosition_management_2eproto.base,
      &scc_info_GTID_management_2eproto.base,
      &scc_info_GTIDStartPosition_management_2eproto.base,}};

static void InitDefaultsscc_info_Empty_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_Empty_default_instance_;
    new (ptr) ::ripple_proto::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Empty_management_2eproto}, {}};

static void InitDefaultsscc_info_FilePosition_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_FilePosition_default_instance_;
    new (ptr) ::ripple_proto::FilePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::FilePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilePosition_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FilePosition_management_2eproto}, {}};

static void InitDefaultsscc_info_GTID_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_GTID_default_instance_;
    new (ptr) ::ripple_proto::GTID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::GTID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GTID_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GTID_management_2eproto}, {}};

static void InitDefaultsscc_info_GTIDStartPosition_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_GTIDStartPosition_default_instance_;
    new (ptr) ::ripple_proto::GTIDStartPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::GTIDStartPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GTIDStartPosition_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GTIDStartPosition_management_2eproto}, {
      &scc_info_GTID_management_2eproto.base,}};

static void InitDefaultsscc_info_MasterInfo_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_MasterInfo_default_instance_;
    new (ptr) ::ripple_proto::MasterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::MasterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MasterInfo_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_MasterInfo_management_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_MasterStatus_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_MasterStatus_default_instance_;
    new (ptr) ::ripple_proto::MasterStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::MasterStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MasterStatus_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MasterStatus_management_2eproto}, {
      &scc_info_MasterInfo_management_2eproto.base,
      &scc_info_ServerVersion_management_2eproto.base,}};

static void InitDefaultsscc_info_OnOff_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_OnOff_default_instance_;
    new (ptr) ::ripple_proto::OnOff();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::OnOff::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnOff_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OnOff_management_2eproto}, {}};

static void InitDefaultsscc_info_RippleInfo_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_RippleInfo_default_instance_;
    new (ptr) ::ripple_proto::RippleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::RippleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RippleInfo_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RippleInfo_management_2eproto}, {}};

static void InitDefaultsscc_info_ServerVersion_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_ServerVersion_default_instance_;
    new (ptr) ::ripple_proto::ServerVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::ServerVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerVersion_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerVersion_management_2eproto}, {}};

static void InitDefaultsscc_info_SlaveAddress_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_SlaveAddress_default_instance_;
    new (ptr) ::ripple_proto::SlaveAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::SlaveAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlaveAddress_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SlaveAddress_management_2eproto}, {}};

static void InitDefaultsscc_info_Slaves_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_Slaves_default_instance_;
    new (ptr) ::ripple_proto::Slaves();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::Slaves::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Slaves_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Slaves_management_2eproto}, {
      &scc_info_SlaveAddress_management_2eproto.base,}};

static void InitDefaultsscc_info_StartSlaveRequest_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_StartSlaveRequest_default_instance_;
    new (ptr) ::ripple_proto::StartSlaveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::StartSlaveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartSlaveRequest_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StartSlaveRequest_management_2eproto}, {}};

static void InitDefaultsscc_info_Status_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_Status_default_instance_;
    new (ptr) ::ripple_proto::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Status_management_2eproto}, {}};

static void InitDefaultsscc_info_StopSlaveRequest_management_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ripple_proto::_StopSlaveRequest_default_instance_;
    new (ptr) ::ripple_proto::StopSlaveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ripple_proto::StopSlaveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopSlaveRequest_management_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopSlaveRequest_management_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_management_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_management_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_management_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_management_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::StartSlaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::StartSlaveRequest, idempotent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::StopSlaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::StopSlaveRequest, idempotent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::ServerVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::ServerVersion, major_version_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::ServerVersion, minor_version_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::ServerVersion, patch_level_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::ServerVersion, comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::FilePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::FilePosition, filename_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::FilePosition, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::GTID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::GTID, uuid_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::GTID, server_id_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::GTID, seq_no_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::GTID, domain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::GTIDStartPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::GTIDStartPosition, gtid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, latest_event_start_position_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, latest_event_end_position_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, latest_completed_gtid_position_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, latest_master_position_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, next_master_position_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, latest_completed_gtid_master_position_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, latest_start_gtid_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, latest_completed_gtid_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, gtid_start_position_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::BinlogPosition, gtid_purged_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, user_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, host_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, port_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, protocol_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, semi_sync_slave_reply_enabled_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, compressed_protocol_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, heartbeat_period_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterInfo, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, state_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, master_info_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, server_id_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, uuid_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, server_version_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, semi_sync_master_enabled_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, server_name_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::MasterStatus, semi_sync_slave_reply_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::SlaveAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::SlaveAddress, host_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::SlaveAddress, port_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::SlaveAddress, server_id_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::SlaveAddress, server_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::Slaves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::Slaves, slave_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::OnOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::OnOff, on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::Status, code_),
  PROTOBUF_FIELD_OFFSET(::ripple_proto::Status, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::RippleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ripple_proto::RippleInfo, server_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ripple_proto::Empty)},
  { 5, -1, sizeof(::ripple_proto::StartSlaveRequest)},
  { 11, -1, sizeof(::ripple_proto::StopSlaveRequest)},
  { 17, -1, sizeof(::ripple_proto::ServerVersion)},
  { 26, -1, sizeof(::ripple_proto::FilePosition)},
  { 33, -1, sizeof(::ripple_proto::GTID)},
  { 42, -1, sizeof(::ripple_proto::GTIDStartPosition)},
  { 48, -1, sizeof(::ripple_proto::BinlogPosition)},
  { 63, -1, sizeof(::ripple_proto::MasterInfo)},
  { 76, -1, sizeof(::ripple_proto::MasterStatus)},
  { 89, -1, sizeof(::ripple_proto::SlaveAddress)},
  { 98, -1, sizeof(::ripple_proto::Slaves)},
  { 104, -1, sizeof(::ripple_proto::OnOff)},
  { 110, -1, sizeof(::ripple_proto::Status)},
  { 117, -1, sizeof(::ripple_proto::RippleInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_StartSlaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_StopSlaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_ServerVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_FilePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_GTID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_GTIDStartPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_BinlogPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_MasterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_MasterStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_SlaveAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_Slaves_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_OnOff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ripple_proto::_RippleInfo_default_instance_),
};

const char descriptor_table_protodef_management_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020management.proto\022\014ripple_proto\032\036google"
  "/protobuf/wrappers.proto\"\007\n\005Empty\"\'\n\021Sta"
  "rtSlaveRequest\022\022\n\nidempotent\030\001 \001(\010\"&\n\020St"
  "opSlaveRequest\022\022\n\nidempotent\030\001 \001(\010\"c\n\rSe"
  "rverVersion\022\025\n\rmajor_version\030\001 \001(\005\022\025\n\rmi"
  "nor_version\030\002 \001(\005\022\023\n\013patch_level\030\003 \001(\005\022\017"
  "\n\007comment\030\004 \001(\t\"0\n\014FilePosition\022\020\n\010filen"
  "ame\030\001 \001(\t\022\016\n\006offset\030\002 \001(\004\"J\n\004GTID\022\014\n\004uui"
  "d\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\004\022\016\n\006seq_no\030\003 \001"
  "(\004\022\021\n\tdomain_id\030\004 \001(\r\"5\n\021GTIDStartPositi"
  "on\022 \n\004gtid\030\001 \003(\0132\022.ripple_proto.GTID\"\353\004\n"
  "\016BinlogPosition\022\?\n\033latest_event_start_po"
  "sition\030\001 \001(\0132\032.ripple_proto.FilePosition"
  "\022=\n\031latest_event_end_position\030\002 \001(\0132\032.ri"
  "pple_proto.FilePosition\022B\n\036latest_comple"
  "ted_gtid_position\030\003 \001(\0132\032.ripple_proto.F"
  "ilePosition\022:\n\026latest_master_position\030\004 "
  "\001(\0132\032.ripple_proto.FilePosition\0228\n\024next_"
  "master_position\030\005 \001(\0132\032.ripple_proto.Fil"
  "ePosition\022I\n%latest_completed_gtid_maste"
  "r_position\030\006 \001(\0132\032.ripple_proto.FilePosi"
  "tion\022-\n\021latest_start_gtid\030\007 \001(\0132\022.ripple"
  "_proto.GTID\0221\n\025latest_completed_gtid\030\010 \001"
  "(\0132\022.ripple_proto.GTID\022<\n\023gtid_start_pos"
  "ition\030\t \001(\0132\037.ripple_proto.GTIDStartPosi"
  "tion\0224\n\013gtid_purged\030\n \001(\0132\037.ripple_proto"
  ".GTIDStartPosition\"\243\003\n\nMasterInfo\022*\n\004use"
  "r\030\001 \001(\0132\034.google.protobuf.StringValue\022*\n"
  "\004host\030\002 \001(\0132\034.google.protobuf.StringValu"
  "e\022)\n\004port\030\003 \001(\0132\033.google.protobuf.Int32V"
  "alue\022.\n\010protocol\030\004 \001(\0132\034.google.protobuf"
  ".StringValue\022A\n\035semi_sync_slave_reply_en"
  "abled\030\005 \001(\0132\032.google.protobuf.BoolValue\022"
  "7\n\023compressed_protocol\030\006 \001(\0132\032.google.pr"
  "otobuf.BoolValue\0226\n\020heartbeat_period\030\007 \001"
  "(\0132\034.google.protobuf.DoubleValue\022.\n\010pass"
  "word\030\010 \001(\0132\034.google.protobuf.StringValue"
  "\"\333\002\n\014MasterStatus\022/\n\005state\030\001 \001(\0162 .rippl"
  "e_proto.MasterStatus.State\022-\n\013master_inf"
  "o\030\002 \001(\0132\030.ripple_proto.MasterInfo\022\021\n\tser"
  "ver_id\030\003 \001(\003\022\014\n\004uuid\030\004 \001(\t\0223\n\016server_ver"
  "sion\030\005 \001(\0132\033.ripple_proto.ServerVersion\022"
  " \n\030semi_sync_master_enabled\030\006 \001(\010\022\023\n\013ser"
  "ver_name\030\007 \001(\t\022$\n\034semi_sync_slave_reply_"
  "active\030\010 \001(\010\"8\n\005State\022\020\n\014DISCONNECTED\020\000\022"
  "\016\n\nCONNECTING\020\001\022\r\n\tCONNECTED\020\002\"R\n\014SlaveA"
  "ddress\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\021\n\tse"
  "rver_id\030\003 \001(\r\022\023\n\013server_name\030\004 \001(\t\"3\n\006Sl"
  "aves\022)\n\005slave\030\001 \003(\0132\032.ripple_proto.Slave"
  "Address\"\023\n\005OnOff\022\n\n\002on\030\001 \001(\010\"$\n\006Status\022\014"
  "\n\004code\030\001 \001(\005\022\014\n\004info\030\002 \001(\t\"!\n\nRippleInfo"
  "\022\023\n\013server_name\030\001 \001(\t2\211\005\n\nManagement\022@\n\r"
  "GetRippleInfo\022\023.ripple_proto.Empty\032\030.rip"
  "ple_proto.RippleInfo\"\000\022D\n\017GetMasterStatu"
  "s\022\023.ripple_proto.Empty\032\032.ripple_proto.Ma"
  "sterStatus\"\000\022A\n\022GetConnectedSlaves\022\023.rip"
  "ple_proto.Empty\032\024.ripple_proto.Slaves\"\000\022"
  "T\n\026GetSlaveBinlogPosition\022\032.ripple_proto"
  ".SlaveAddress\032\034.ripple_proto.BinlogPosit"
  "ion\"\000\022H\n\021GetBinlogPosition\022\023.ripple_prot"
  "o.Empty\032\034.ripple_proto.BinlogPosition\"\000\022"
  "E\n\nStartSlave\022\037.ripple_proto.StartSlaveR"
  "equest\032\024.ripple_proto.Status\"\000\022C\n\tStopSl"
  "ave\022\036.ripple_proto.StopSlaveRequest\032\024.ri"
  "pple_proto.Status\"\000\022B\n\023ToggleSemiSyncRep"
  "ly\022\023.ripple_proto.OnOff\032\024.ripple_proto.S"
  "tatus\"\000\022@\n\014ChangeMaster\022\030.ripple_proto.M"
  "asterInfo\032\024.ripple_proto.Status\"\000b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_management_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_management_2eproto_sccs[15] = {
  &scc_info_BinlogPosition_management_2eproto.base,
  &scc_info_Empty_management_2eproto.base,
  &scc_info_FilePosition_management_2eproto.base,
  &scc_info_GTID_management_2eproto.base,
  &scc_info_GTIDStartPosition_management_2eproto.base,
  &scc_info_MasterInfo_management_2eproto.base,
  &scc_info_MasterStatus_management_2eproto.base,
  &scc_info_OnOff_management_2eproto.base,
  &scc_info_RippleInfo_management_2eproto.base,
  &scc_info_ServerVersion_management_2eproto.base,
  &scc_info_SlaveAddress_management_2eproto.base,
  &scc_info_Slaves_management_2eproto.base,
  &scc_info_StartSlaveRequest_management_2eproto.base,
  &scc_info_Status_management_2eproto.base,
  &scc_info_StopSlaveRequest_management_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_management_2eproto_once;
static bool descriptor_table_management_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_management_2eproto = {
  &descriptor_table_management_2eproto_initialized, descriptor_table_protodef_management_2eproto, "management.proto", 2721,
  &descriptor_table_management_2eproto_once, descriptor_table_management_2eproto_sccs, descriptor_table_management_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_management_2eproto::offsets,
  file_level_metadata_management_2eproto, 15, file_level_enum_descriptors_management_2eproto, file_level_service_descriptors_management_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_management_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_management_2eproto), true);
namespace ripple_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MasterStatus_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_management_2eproto);
  return file_level_enum_descriptors_management_2eproto[0];
}
bool MasterStatus_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MasterStatus_State MasterStatus::DISCONNECTED;
constexpr MasterStatus_State MasterStatus::CONNECTING;
constexpr MasterStatus_State MasterStatus::CONNECTED;
constexpr MasterStatus_State MasterStatus::State_MIN;
constexpr MasterStatus_State MasterStatus::State_MAX;
constexpr int MasterStatus::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::_Internal {
 public:
};

Empty::Empty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ripple_proto.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:ripple_proto.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_management_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.Empty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.Empty)
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartSlaveRequest::InitAsDefaultInstance() {
}
class StartSlaveRequest::_Internal {
 public:
};

StartSlaveRequest::StartSlaveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.StartSlaveRequest)
}
StartSlaveRequest::StartSlaveRequest(const StartSlaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idempotent_ = from.idempotent_;
  // @@protoc_insertion_point(copy_constructor:ripple_proto.StartSlaveRequest)
}

void StartSlaveRequest::SharedCtor() {
  idempotent_ = false;
}

StartSlaveRequest::~StartSlaveRequest() {
  // @@protoc_insertion_point(destructor:ripple_proto.StartSlaveRequest)
  SharedDtor();
}

void StartSlaveRequest::SharedDtor() {
}

void StartSlaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartSlaveRequest& StartSlaveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartSlaveRequest_management_2eproto.base);
  return *internal_default_instance();
}


void StartSlaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.StartSlaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idempotent_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartSlaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool idempotent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idempotent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartSlaveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.StartSlaveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool idempotent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &idempotent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.StartSlaveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.StartSlaveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartSlaveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.StartSlaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool idempotent = 1;
  if (this->idempotent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->idempotent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.StartSlaveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StartSlaveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.StartSlaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool idempotent = 1;
  if (this->idempotent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->idempotent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.StartSlaveRequest)
  return target;
}

size_t StartSlaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.StartSlaveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool idempotent = 1;
  if (this->idempotent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartSlaveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.StartSlaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartSlaveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartSlaveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.StartSlaveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.StartSlaveRequest)
    MergeFrom(*source);
  }
}

void StartSlaveRequest::MergeFrom(const StartSlaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.StartSlaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idempotent() != 0) {
    set_idempotent(from.idempotent());
  }
}

void StartSlaveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.StartSlaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSlaveRequest::CopyFrom(const StartSlaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.StartSlaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSlaveRequest::IsInitialized() const {
  return true;
}

void StartSlaveRequest::InternalSwap(StartSlaveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idempotent_, other->idempotent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSlaveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopSlaveRequest::InitAsDefaultInstance() {
}
class StopSlaveRequest::_Internal {
 public:
};

StopSlaveRequest::StopSlaveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.StopSlaveRequest)
}
StopSlaveRequest::StopSlaveRequest(const StopSlaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idempotent_ = from.idempotent_;
  // @@protoc_insertion_point(copy_constructor:ripple_proto.StopSlaveRequest)
}

void StopSlaveRequest::SharedCtor() {
  idempotent_ = false;
}

StopSlaveRequest::~StopSlaveRequest() {
  // @@protoc_insertion_point(destructor:ripple_proto.StopSlaveRequest)
  SharedDtor();
}

void StopSlaveRequest::SharedDtor() {
}

void StopSlaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopSlaveRequest& StopSlaveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopSlaveRequest_management_2eproto.base);
  return *internal_default_instance();
}


void StopSlaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.StopSlaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idempotent_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopSlaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool idempotent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idempotent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopSlaveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.StopSlaveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool idempotent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &idempotent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.StopSlaveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.StopSlaveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopSlaveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.StopSlaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool idempotent = 1;
  if (this->idempotent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->idempotent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.StopSlaveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSlaveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.StopSlaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool idempotent = 1;
  if (this->idempotent() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->idempotent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.StopSlaveRequest)
  return target;
}

size_t StopSlaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.StopSlaveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool idempotent = 1;
  if (this->idempotent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSlaveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.StopSlaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSlaveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopSlaveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.StopSlaveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.StopSlaveRequest)
    MergeFrom(*source);
  }
}

void StopSlaveRequest::MergeFrom(const StopSlaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.StopSlaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idempotent() != 0) {
    set_idempotent(from.idempotent());
  }
}

void StopSlaveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.StopSlaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSlaveRequest::CopyFrom(const StopSlaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.StopSlaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSlaveRequest::IsInitialized() const {
  return true;
}

void StopSlaveRequest::InternalSwap(StopSlaveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idempotent_, other->idempotent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSlaveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerVersion::InitAsDefaultInstance() {
}
class ServerVersion::_Internal {
 public:
};

ServerVersion::ServerVersion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.ServerVersion)
}
ServerVersion::ServerVersion(const ServerVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&major_version_, &from.major_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_level_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(patch_level_));
  // @@protoc_insertion_point(copy_constructor:ripple_proto.ServerVersion)
}

void ServerVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerVersion_management_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_level_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(patch_level_));
}

ServerVersion::~ServerVersion() {
  // @@protoc_insertion_point(destructor:ripple_proto.ServerVersion)
  SharedDtor();
}

void ServerVersion::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerVersion& ServerVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerVersion_management_2eproto.base);
  return *internal_default_instance();
}


void ServerVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.ServerVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_level_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(patch_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 major_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minor_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 patch_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "ripple_proto.ServerVersion.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerVersion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.ServerVersion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 major_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minor_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 patch_level = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.ServerVersion.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.ServerVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.ServerVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerVersion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.ServerVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major_version = 1;
  if (this->major_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->major_version(), output);
  }

  // int32 minor_version = 2;
  if (this->minor_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->minor_version(), output);
  }

  // int32 patch_level = 3;
  if (this->patch_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->patch_level(), output);
  }

  // string comment = 4;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.ServerVersion.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.ServerVersion)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerVersion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.ServerVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major_version = 1;
  if (this->major_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->major_version(), target);
  }

  // int32 minor_version = 2;
  if (this->minor_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->minor_version(), target);
  }

  // int32 patch_level = 3;
  if (this->patch_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->patch_level(), target);
  }

  // string comment = 4;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.ServerVersion.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.ServerVersion)
  return target;
}

size_t ServerVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.ServerVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 4;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // int32 major_version = 1;
  if (this->major_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->major_version());
  }

  // int32 minor_version = 2;
  if (this->minor_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->minor_version());
  }

  // int32 patch_level = 3;
  if (this->patch_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->patch_level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.ServerVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.ServerVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.ServerVersion)
    MergeFrom(*source);
  }
}

void ServerVersion::MergeFrom(const ServerVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.ServerVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.major_version() != 0) {
    set_major_version(from.major_version());
  }
  if (from.minor_version() != 0) {
    set_minor_version(from.minor_version());
  }
  if (from.patch_level() != 0) {
    set_patch_level(from.patch_level());
  }
}

void ServerVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.ServerVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerVersion::CopyFrom(const ServerVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.ServerVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerVersion::IsInitialized() const {
  return true;
}

void ServerVersion::InternalSwap(ServerVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(patch_level_, other->patch_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilePosition::InitAsDefaultInstance() {
}
class FilePosition::_Internal {
 public:
};

FilePosition::FilePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.FilePosition)
}
FilePosition::FilePosition(const FilePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:ripple_proto.FilePosition)
}

void FilePosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilePosition_management_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_ = PROTOBUF_ULONGLONG(0);
}

FilePosition::~FilePosition() {
  // @@protoc_insertion_point(destructor:ripple_proto.FilePosition)
  SharedDtor();
}

void FilePosition::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilePosition& FilePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilePosition_management_2eproto.base);
  return *internal_default_instance();
}


void FilePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.FilePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "ripple_proto.FilePosition.filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilePosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.FilePosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.FilePosition.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.FilePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.FilePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilePosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.FilePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.FilePosition.filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.FilePosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* FilePosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.FilePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.FilePosition.filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.FilePosition)
  return target;
}

size_t FilePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.FilePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.FilePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const FilePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.FilePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.FilePosition)
    MergeFrom(*source);
  }
}

void FilePosition::MergeFrom(const FilePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.FilePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void FilePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.FilePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePosition::CopyFrom(const FilePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.FilePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePosition::IsInitialized() const {
  return true;
}

void FilePosition::InternalSwap(FilePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GTID::InitAsDefaultInstance() {
}
class GTID::_Internal {
 public:
};

GTID::GTID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.GTID)
}
GTID::GTID(const GTID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&domain_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(domain_id_));
  // @@protoc_insertion_point(copy_constructor:ripple_proto.GTID)
}

void GTID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GTID_management_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(domain_id_));
}

GTID::~GTID() {
  // @@protoc_insertion_point(destructor:ripple_proto.GTID)
  SharedDtor();
}

void GTID::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GTID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GTID& GTID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GTID_management_2eproto.base);
  return *internal_default_instance();
}


void GTID::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.GTID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(domain_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GTID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "ripple_proto.GTID.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 domain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          domain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GTID::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.GTID)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.GTID.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 server_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 seq_no = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 domain_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.GTID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.GTID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GTID::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.GTID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.GTID.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // uint64 server_id = 2;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->server_id(), output);
  }

  // uint64 seq_no = 3;
  if (this->seq_no() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->seq_no(), output);
  }

  // uint32 domain_id = 4;
  if (this->domain_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->domain_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.GTID)
}

::PROTOBUF_NAMESPACE_ID::uint8* GTID::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.GTID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.GTID.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // uint64 server_id = 2;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_id(), target);
  }

  // uint64 seq_no = 3;
  if (this->seq_no() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->seq_no(), target);
  }

  // uint32 domain_id = 4;
  if (this->domain_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->domain_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.GTID)
  return target;
}

size_t GTID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.GTID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // uint64 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->server_id());
  }

  // uint64 seq_no = 3;
  if (this->seq_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->seq_no());
  }

  // uint32 domain_id = 4;
  if (this->domain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->domain_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GTID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.GTID)
  GOOGLE_DCHECK_NE(&from, this);
  const GTID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GTID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.GTID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.GTID)
    MergeFrom(*source);
  }
}

void GTID::MergeFrom(const GTID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.GTID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.seq_no() != 0) {
    set_seq_no(from.seq_no());
  }
  if (from.domain_id() != 0) {
    set_domain_id(from.domain_id());
  }
}

void GTID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.GTID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTID::CopyFrom(const GTID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.GTID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTID::IsInitialized() const {
  return true;
}

void GTID::InternalSwap(GTID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(seq_no_, other->seq_no_);
  swap(domain_id_, other->domain_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GTID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GTIDStartPosition::InitAsDefaultInstance() {
}
class GTIDStartPosition::_Internal {
 public:
};

GTIDStartPosition::GTIDStartPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.GTIDStartPosition)
}
GTIDStartPosition::GTIDStartPosition(const GTIDStartPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      gtid_(from.gtid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ripple_proto.GTIDStartPosition)
}

void GTIDStartPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GTIDStartPosition_management_2eproto.base);
}

GTIDStartPosition::~GTIDStartPosition() {
  // @@protoc_insertion_point(destructor:ripple_proto.GTIDStartPosition)
  SharedDtor();
}

void GTIDStartPosition::SharedDtor() {
}

void GTIDStartPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GTIDStartPosition& GTIDStartPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GTIDStartPosition_management_2eproto.base);
  return *internal_default_instance();
}


void GTIDStartPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.GTIDStartPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gtid_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GTIDStartPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ripple_proto.GTID gtid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_gtid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GTIDStartPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.GTIDStartPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ripple_proto.GTID gtid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_gtid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.GTIDStartPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.GTIDStartPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GTIDStartPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.GTIDStartPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ripple_proto.GTID gtid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gtid_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gtid(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.GTIDStartPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* GTIDStartPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.GTIDStartPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ripple_proto.GTID gtid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gtid_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gtid(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.GTIDStartPosition)
  return target;
}

size_t GTIDStartPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.GTIDStartPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ripple_proto.GTID gtid = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gtid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->gtid(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GTIDStartPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.GTIDStartPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const GTIDStartPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GTIDStartPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.GTIDStartPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.GTIDStartPosition)
    MergeFrom(*source);
  }
}

void GTIDStartPosition::MergeFrom(const GTIDStartPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.GTIDStartPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gtid_.MergeFrom(from.gtid_);
}

void GTIDStartPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.GTIDStartPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTIDStartPosition::CopyFrom(const GTIDStartPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.GTIDStartPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTIDStartPosition::IsInitialized() const {
  return true;
}

void GTIDStartPosition::InternalSwap(GTIDStartPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&gtid_)->InternalSwap(CastToBase(&other->gtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GTIDStartPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinlogPosition::InitAsDefaultInstance() {
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->latest_event_start_position_ = const_cast< ::ripple_proto::FilePosition*>(
      ::ripple_proto::FilePosition::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->latest_event_end_position_ = const_cast< ::ripple_proto::FilePosition*>(
      ::ripple_proto::FilePosition::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->latest_completed_gtid_position_ = const_cast< ::ripple_proto::FilePosition*>(
      ::ripple_proto::FilePosition::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->latest_master_position_ = const_cast< ::ripple_proto::FilePosition*>(
      ::ripple_proto::FilePosition::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->next_master_position_ = const_cast< ::ripple_proto::FilePosition*>(
      ::ripple_proto::FilePosition::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->latest_completed_gtid_master_position_ = const_cast< ::ripple_proto::FilePosition*>(
      ::ripple_proto::FilePosition::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->latest_start_gtid_ = const_cast< ::ripple_proto::GTID*>(
      ::ripple_proto::GTID::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->latest_completed_gtid_ = const_cast< ::ripple_proto::GTID*>(
      ::ripple_proto::GTID::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->gtid_start_position_ = const_cast< ::ripple_proto::GTIDStartPosition*>(
      ::ripple_proto::GTIDStartPosition::internal_default_instance());
  ::ripple_proto::_BinlogPosition_default_instance_._instance.get_mutable()->gtid_purged_ = const_cast< ::ripple_proto::GTIDStartPosition*>(
      ::ripple_proto::GTIDStartPosition::internal_default_instance());
}
class BinlogPosition::_Internal {
 public:
  static const ::ripple_proto::FilePosition& latest_event_start_position(const BinlogPosition* msg);
  static const ::ripple_proto::FilePosition& latest_event_end_position(const BinlogPosition* msg);
  static const ::ripple_proto::FilePosition& latest_completed_gtid_position(const BinlogPosition* msg);
  static const ::ripple_proto::FilePosition& latest_master_position(const BinlogPosition* msg);
  static const ::ripple_proto::FilePosition& next_master_position(const BinlogPosition* msg);
  static const ::ripple_proto::FilePosition& latest_completed_gtid_master_position(const BinlogPosition* msg);
  static const ::ripple_proto::GTID& latest_start_gtid(const BinlogPosition* msg);
  static const ::ripple_proto::GTID& latest_completed_gtid(const BinlogPosition* msg);
  static const ::ripple_proto::GTIDStartPosition& gtid_start_position(const BinlogPosition* msg);
  static const ::ripple_proto::GTIDStartPosition& gtid_purged(const BinlogPosition* msg);
};

const ::ripple_proto::FilePosition&
BinlogPosition::_Internal::latest_event_start_position(const BinlogPosition* msg) {
  return *msg->latest_event_start_position_;
}
const ::ripple_proto::FilePosition&
BinlogPosition::_Internal::latest_event_end_position(const BinlogPosition* msg) {
  return *msg->latest_event_end_position_;
}
const ::ripple_proto::FilePosition&
BinlogPosition::_Internal::latest_completed_gtid_position(const BinlogPosition* msg) {
  return *msg->latest_completed_gtid_position_;
}
const ::ripple_proto::FilePosition&
BinlogPosition::_Internal::latest_master_position(const BinlogPosition* msg) {
  return *msg->latest_master_position_;
}
const ::ripple_proto::FilePosition&
BinlogPosition::_Internal::next_master_position(const BinlogPosition* msg) {
  return *msg->next_master_position_;
}
const ::ripple_proto::FilePosition&
BinlogPosition::_Internal::latest_completed_gtid_master_position(const BinlogPosition* msg) {
  return *msg->latest_completed_gtid_master_position_;
}
const ::ripple_proto::GTID&
BinlogPosition::_Internal::latest_start_gtid(const BinlogPosition* msg) {
  return *msg->latest_start_gtid_;
}
const ::ripple_proto::GTID&
BinlogPosition::_Internal::latest_completed_gtid(const BinlogPosition* msg) {
  return *msg->latest_completed_gtid_;
}
const ::ripple_proto::GTIDStartPosition&
BinlogPosition::_Internal::gtid_start_position(const BinlogPosition* msg) {
  return *msg->gtid_start_position_;
}
const ::ripple_proto::GTIDStartPosition&
BinlogPosition::_Internal::gtid_purged(const BinlogPosition* msg) {
  return *msg->gtid_purged_;
}
BinlogPosition::BinlogPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.BinlogPosition)
}
BinlogPosition::BinlogPosition(const BinlogPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_latest_event_start_position()) {
    latest_event_start_position_ = new ::ripple_proto::FilePosition(*from.latest_event_start_position_);
  } else {
    latest_event_start_position_ = nullptr;
  }
  if (from.has_latest_event_end_position()) {
    latest_event_end_position_ = new ::ripple_proto::FilePosition(*from.latest_event_end_position_);
  } else {
    latest_event_end_position_ = nullptr;
  }
  if (from.has_latest_completed_gtid_position()) {
    latest_completed_gtid_position_ = new ::ripple_proto::FilePosition(*from.latest_completed_gtid_position_);
  } else {
    latest_completed_gtid_position_ = nullptr;
  }
  if (from.has_latest_master_position()) {
    latest_master_position_ = new ::ripple_proto::FilePosition(*from.latest_master_position_);
  } else {
    latest_master_position_ = nullptr;
  }
  if (from.has_next_master_position()) {
    next_master_position_ = new ::ripple_proto::FilePosition(*from.next_master_position_);
  } else {
    next_master_position_ = nullptr;
  }
  if (from.has_latest_completed_gtid_master_position()) {
    latest_completed_gtid_master_position_ = new ::ripple_proto::FilePosition(*from.latest_completed_gtid_master_position_);
  } else {
    latest_completed_gtid_master_position_ = nullptr;
  }
  if (from.has_latest_start_gtid()) {
    latest_start_gtid_ = new ::ripple_proto::GTID(*from.latest_start_gtid_);
  } else {
    latest_start_gtid_ = nullptr;
  }
  if (from.has_latest_completed_gtid()) {
    latest_completed_gtid_ = new ::ripple_proto::GTID(*from.latest_completed_gtid_);
  } else {
    latest_completed_gtid_ = nullptr;
  }
  if (from.has_gtid_start_position()) {
    gtid_start_position_ = new ::ripple_proto::GTIDStartPosition(*from.gtid_start_position_);
  } else {
    gtid_start_position_ = nullptr;
  }
  if (from.has_gtid_purged()) {
    gtid_purged_ = new ::ripple_proto::GTIDStartPosition(*from.gtid_purged_);
  } else {
    gtid_purged_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ripple_proto.BinlogPosition)
}

void BinlogPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinlogPosition_management_2eproto.base);
  ::memset(&latest_event_start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gtid_purged_) -
      reinterpret_cast<char*>(&latest_event_start_position_)) + sizeof(gtid_purged_));
}

BinlogPosition::~BinlogPosition() {
  // @@protoc_insertion_point(destructor:ripple_proto.BinlogPosition)
  SharedDtor();
}

void BinlogPosition::SharedDtor() {
  if (this != internal_default_instance()) delete latest_event_start_position_;
  if (this != internal_default_instance()) delete latest_event_end_position_;
  if (this != internal_default_instance()) delete latest_completed_gtid_position_;
  if (this != internal_default_instance()) delete latest_master_position_;
  if (this != internal_default_instance()) delete next_master_position_;
  if (this != internal_default_instance()) delete latest_completed_gtid_master_position_;
  if (this != internal_default_instance()) delete latest_start_gtid_;
  if (this != internal_default_instance()) delete latest_completed_gtid_;
  if (this != internal_default_instance()) delete gtid_start_position_;
  if (this != internal_default_instance()) delete gtid_purged_;
}

void BinlogPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinlogPosition& BinlogPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinlogPosition_management_2eproto.base);
  return *internal_default_instance();
}


void BinlogPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.BinlogPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && latest_event_start_position_ != nullptr) {
    delete latest_event_start_position_;
  }
  latest_event_start_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && latest_event_end_position_ != nullptr) {
    delete latest_event_end_position_;
  }
  latest_event_end_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && latest_completed_gtid_position_ != nullptr) {
    delete latest_completed_gtid_position_;
  }
  latest_completed_gtid_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && latest_master_position_ != nullptr) {
    delete latest_master_position_;
  }
  latest_master_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && next_master_position_ != nullptr) {
    delete next_master_position_;
  }
  next_master_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && latest_completed_gtid_master_position_ != nullptr) {
    delete latest_completed_gtid_master_position_;
  }
  latest_completed_gtid_master_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && latest_start_gtid_ != nullptr) {
    delete latest_start_gtid_;
  }
  latest_start_gtid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && latest_completed_gtid_ != nullptr) {
    delete latest_completed_gtid_;
  }
  latest_completed_gtid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gtid_start_position_ != nullptr) {
    delete gtid_start_position_;
  }
  gtid_start_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gtid_purged_ != nullptr) {
    delete gtid_purged_;
  }
  gtid_purged_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinlogPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ripple_proto.FilePosition latest_event_start_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_latest_event_start_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.FilePosition latest_event_end_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_latest_event_end_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.FilePosition latest_completed_gtid_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_latest_completed_gtid_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.FilePosition latest_master_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_latest_master_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.FilePosition next_master_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_next_master_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.FilePosition latest_completed_gtid_master_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_latest_completed_gtid_master_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.GTID latest_start_gtid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_latest_start_gtid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.GTID latest_completed_gtid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_latest_completed_gtid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.GTIDStartPosition gtid_start_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_gtid_start_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.GTIDStartPosition gtid_purged = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_gtid_purged(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinlogPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.BinlogPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ripple_proto.FilePosition latest_event_start_position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_event_start_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.FilePosition latest_event_end_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_event_end_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.FilePosition latest_completed_gtid_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_completed_gtid_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.FilePosition latest_master_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_master_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.FilePosition next_master_position = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_next_master_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.FilePosition latest_completed_gtid_master_position = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_completed_gtid_master_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.GTID latest_start_gtid = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_start_gtid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.GTID latest_completed_gtid = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest_completed_gtid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.GTIDStartPosition gtid_start_position = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gtid_start_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.GTIDStartPosition gtid_purged = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gtid_purged()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.BinlogPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.BinlogPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinlogPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.BinlogPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ripple_proto.FilePosition latest_event_start_position = 1;
  if (this->has_latest_event_start_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::latest_event_start_position(this), output);
  }

  // .ripple_proto.FilePosition latest_event_end_position = 2;
  if (this->has_latest_event_end_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::latest_event_end_position(this), output);
  }

  // .ripple_proto.FilePosition latest_completed_gtid_position = 3;
  if (this->has_latest_completed_gtid_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::latest_completed_gtid_position(this), output);
  }

  // .ripple_proto.FilePosition latest_master_position = 4;
  if (this->has_latest_master_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::latest_master_position(this), output);
  }

  // .ripple_proto.FilePosition next_master_position = 5;
  if (this->has_next_master_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::next_master_position(this), output);
  }

  // .ripple_proto.FilePosition latest_completed_gtid_master_position = 6;
  if (this->has_latest_completed_gtid_master_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::latest_completed_gtid_master_position(this), output);
  }

  // .ripple_proto.GTID latest_start_gtid = 7;
  if (this->has_latest_start_gtid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::latest_start_gtid(this), output);
  }

  // .ripple_proto.GTID latest_completed_gtid = 8;
  if (this->has_latest_completed_gtid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::latest_completed_gtid(this), output);
  }

  // .ripple_proto.GTIDStartPosition gtid_start_position = 9;
  if (this->has_gtid_start_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::gtid_start_position(this), output);
  }

  // .ripple_proto.GTIDStartPosition gtid_purged = 10;
  if (this->has_gtid_purged()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::gtid_purged(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.BinlogPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinlogPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.BinlogPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ripple_proto.FilePosition latest_event_start_position = 1;
  if (this->has_latest_event_start_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::latest_event_start_position(this), target);
  }

  // .ripple_proto.FilePosition latest_event_end_position = 2;
  if (this->has_latest_event_end_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::latest_event_end_position(this), target);
  }

  // .ripple_proto.FilePosition latest_completed_gtid_position = 3;
  if (this->has_latest_completed_gtid_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::latest_completed_gtid_position(this), target);
  }

  // .ripple_proto.FilePosition latest_master_position = 4;
  if (this->has_latest_master_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::latest_master_position(this), target);
  }

  // .ripple_proto.FilePosition next_master_position = 5;
  if (this->has_next_master_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::next_master_position(this), target);
  }

  // .ripple_proto.FilePosition latest_completed_gtid_master_position = 6;
  if (this->has_latest_completed_gtid_master_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::latest_completed_gtid_master_position(this), target);
  }

  // .ripple_proto.GTID latest_start_gtid = 7;
  if (this->has_latest_start_gtid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::latest_start_gtid(this), target);
  }

  // .ripple_proto.GTID latest_completed_gtid = 8;
  if (this->has_latest_completed_gtid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::latest_completed_gtid(this), target);
  }

  // .ripple_proto.GTIDStartPosition gtid_start_position = 9;
  if (this->has_gtid_start_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::gtid_start_position(this), target);
  }

  // .ripple_proto.GTIDStartPosition gtid_purged = 10;
  if (this->has_gtid_purged()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::gtid_purged(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.BinlogPosition)
  return target;
}

size_t BinlogPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.BinlogPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ripple_proto.FilePosition latest_event_start_position = 1;
  if (this->has_latest_event_start_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_event_start_position_);
  }

  // .ripple_proto.FilePosition latest_event_end_position = 2;
  if (this->has_latest_event_end_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_event_end_position_);
  }

  // .ripple_proto.FilePosition latest_completed_gtid_position = 3;
  if (this->has_latest_completed_gtid_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_completed_gtid_position_);
  }

  // .ripple_proto.FilePosition latest_master_position = 4;
  if (this->has_latest_master_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_master_position_);
  }

  // .ripple_proto.FilePosition next_master_position = 5;
  if (this->has_next_master_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_master_position_);
  }

  // .ripple_proto.FilePosition latest_completed_gtid_master_position = 6;
  if (this->has_latest_completed_gtid_master_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_completed_gtid_master_position_);
  }

  // .ripple_proto.GTID latest_start_gtid = 7;
  if (this->has_latest_start_gtid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_start_gtid_);
  }

  // .ripple_proto.GTID latest_completed_gtid = 8;
  if (this->has_latest_completed_gtid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_completed_gtid_);
  }

  // .ripple_proto.GTIDStartPosition gtid_start_position = 9;
  if (this->has_gtid_start_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gtid_start_position_);
  }

  // .ripple_proto.GTIDStartPosition gtid_purged = 10;
  if (this->has_gtid_purged()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gtid_purged_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinlogPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.BinlogPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const BinlogPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinlogPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.BinlogPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.BinlogPosition)
    MergeFrom(*source);
  }
}

void BinlogPosition::MergeFrom(const BinlogPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.BinlogPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_latest_event_start_position()) {
    mutable_latest_event_start_position()->::ripple_proto::FilePosition::MergeFrom(from.latest_event_start_position());
  }
  if (from.has_latest_event_end_position()) {
    mutable_latest_event_end_position()->::ripple_proto::FilePosition::MergeFrom(from.latest_event_end_position());
  }
  if (from.has_latest_completed_gtid_position()) {
    mutable_latest_completed_gtid_position()->::ripple_proto::FilePosition::MergeFrom(from.latest_completed_gtid_position());
  }
  if (from.has_latest_master_position()) {
    mutable_latest_master_position()->::ripple_proto::FilePosition::MergeFrom(from.latest_master_position());
  }
  if (from.has_next_master_position()) {
    mutable_next_master_position()->::ripple_proto::FilePosition::MergeFrom(from.next_master_position());
  }
  if (from.has_latest_completed_gtid_master_position()) {
    mutable_latest_completed_gtid_master_position()->::ripple_proto::FilePosition::MergeFrom(from.latest_completed_gtid_master_position());
  }
  if (from.has_latest_start_gtid()) {
    mutable_latest_start_gtid()->::ripple_proto::GTID::MergeFrom(from.latest_start_gtid());
  }
  if (from.has_latest_completed_gtid()) {
    mutable_latest_completed_gtid()->::ripple_proto::GTID::MergeFrom(from.latest_completed_gtid());
  }
  if (from.has_gtid_start_position()) {
    mutable_gtid_start_position()->::ripple_proto::GTIDStartPosition::MergeFrom(from.gtid_start_position());
  }
  if (from.has_gtid_purged()) {
    mutable_gtid_purged()->::ripple_proto::GTIDStartPosition::MergeFrom(from.gtid_purged());
  }
}

void BinlogPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.BinlogPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinlogPosition::CopyFrom(const BinlogPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.BinlogPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinlogPosition::IsInitialized() const {
  return true;
}

void BinlogPosition::InternalSwap(BinlogPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latest_event_start_position_, other->latest_event_start_position_);
  swap(latest_event_end_position_, other->latest_event_end_position_);
  swap(latest_completed_gtid_position_, other->latest_completed_gtid_position_);
  swap(latest_master_position_, other->latest_master_position_);
  swap(next_master_position_, other->next_master_position_);
  swap(latest_completed_gtid_master_position_, other->latest_completed_gtid_master_position_);
  swap(latest_start_gtid_, other->latest_start_gtid_);
  swap(latest_completed_gtid_, other->latest_completed_gtid_);
  swap(gtid_start_position_, other->gtid_start_position_);
  swap(gtid_purged_, other->gtid_purged_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinlogPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MasterInfo::InitAsDefaultInstance() {
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->user_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->host_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->port_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->protocol_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->semi_sync_slave_reply_enabled_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->compressed_protocol_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->heartbeat_period_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::ripple_proto::_MasterInfo_default_instance_._instance.get_mutable()->password_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
}
class MasterInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& user(const MasterInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& host(const MasterInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& port(const MasterInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& protocol(const MasterInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& semi_sync_slave_reply_enabled(const MasterInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& compressed_protocol(const MasterInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& heartbeat_period(const MasterInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& password(const MasterInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
MasterInfo::_Internal::user(const MasterInfo* msg) {
  return *msg->user_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
MasterInfo::_Internal::host(const MasterInfo* msg) {
  return *msg->host_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
MasterInfo::_Internal::port(const MasterInfo* msg) {
  return *msg->port_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
MasterInfo::_Internal::protocol(const MasterInfo* msg) {
  return *msg->protocol_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
MasterInfo::_Internal::semi_sync_slave_reply_enabled(const MasterInfo* msg) {
  return *msg->semi_sync_slave_reply_enabled_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
MasterInfo::_Internal::compressed_protocol(const MasterInfo* msg) {
  return *msg->compressed_protocol_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
MasterInfo::_Internal::heartbeat_period(const MasterInfo* msg) {
  return *msg->heartbeat_period_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
MasterInfo::_Internal::password(const MasterInfo* msg) {
  return *msg->password_;
}
void MasterInfo::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
void MasterInfo::clear_host() {
  if (GetArenaNoVirtual() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
void MasterInfo::clear_port() {
  if (GetArenaNoVirtual() == nullptr && port_ != nullptr) {
    delete port_;
  }
  port_ = nullptr;
}
void MasterInfo::clear_protocol() {
  if (GetArenaNoVirtual() == nullptr && protocol_ != nullptr) {
    delete protocol_;
  }
  protocol_ = nullptr;
}
void MasterInfo::clear_semi_sync_slave_reply_enabled() {
  if (GetArenaNoVirtual() == nullptr && semi_sync_slave_reply_enabled_ != nullptr) {
    delete semi_sync_slave_reply_enabled_;
  }
  semi_sync_slave_reply_enabled_ = nullptr;
}
void MasterInfo::clear_compressed_protocol() {
  if (GetArenaNoVirtual() == nullptr && compressed_protocol_ != nullptr) {
    delete compressed_protocol_;
  }
  compressed_protocol_ = nullptr;
}
void MasterInfo::clear_heartbeat_period() {
  if (GetArenaNoVirtual() == nullptr && heartbeat_period_ != nullptr) {
    delete heartbeat_period_;
  }
  heartbeat_period_ = nullptr;
}
void MasterInfo::clear_password() {
  if (GetArenaNoVirtual() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
}
MasterInfo::MasterInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.MasterInfo)
}
MasterInfo::MasterInfo(const MasterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from.has_host()) {
    host_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.host_);
  } else {
    host_ = nullptr;
  }
  if (from.has_port()) {
    port_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.port_);
  } else {
    port_ = nullptr;
  }
  if (from.has_protocol()) {
    protocol_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.protocol_);
  } else {
    protocol_ = nullptr;
  }
  if (from.has_semi_sync_slave_reply_enabled()) {
    semi_sync_slave_reply_enabled_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.semi_sync_slave_reply_enabled_);
  } else {
    semi_sync_slave_reply_enabled_ = nullptr;
  }
  if (from.has_compressed_protocol()) {
    compressed_protocol_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.compressed_protocol_);
  } else {
    compressed_protocol_ = nullptr;
  }
  if (from.has_heartbeat_period()) {
    heartbeat_period_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.heartbeat_period_);
  } else {
    heartbeat_period_ = nullptr;
  }
  if (from.has_password()) {
    password_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.password_);
  } else {
    password_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ripple_proto.MasterInfo)
}

void MasterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MasterInfo_management_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_) -
      reinterpret_cast<char*>(&user_)) + sizeof(password_));
}

MasterInfo::~MasterInfo() {
  // @@protoc_insertion_point(destructor:ripple_proto.MasterInfo)
  SharedDtor();
}

void MasterInfo::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete host_;
  if (this != internal_default_instance()) delete port_;
  if (this != internal_default_instance()) delete protocol_;
  if (this != internal_default_instance()) delete semi_sync_slave_reply_enabled_;
  if (this != internal_default_instance()) delete compressed_protocol_;
  if (this != internal_default_instance()) delete heartbeat_period_;
  if (this != internal_default_instance()) delete password_;
}

void MasterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterInfo& MasterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterInfo_management_2eproto.base);
  return *internal_default_instance();
}


void MasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.MasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && port_ != nullptr) {
    delete port_;
  }
  port_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && protocol_ != nullptr) {
    delete protocol_;
  }
  protocol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && semi_sync_slave_reply_enabled_ != nullptr) {
    delete semi_sync_slave_reply_enabled_;
  }
  semi_sync_slave_reply_enabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && compressed_protocol_ != nullptr) {
    delete compressed_protocol_;
  }
  compressed_protocol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && heartbeat_period_ != nullptr) {
    delete heartbeat_period_;
  }
  heartbeat_period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MasterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.StringValue user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_protocol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_semi_sync_slave_reply_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue compressed_protocol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_compressed_protocol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue heartbeat_period = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_heartbeat_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue password = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MasterInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.MasterInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.StringValue user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue host = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue protocol = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_protocol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_semi_sync_slave_reply_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue compressed_protocol = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compressed_protocol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.DoubleValue heartbeat_period = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue password = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.MasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.MasterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MasterInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.MasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue user = 1;
  if (this->has_user()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::user(this), output);
  }

  // .google.protobuf.StringValue host = 2;
  if (this->has_host()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::host(this), output);
  }

  // .google.protobuf.Int32Value port = 3;
  if (this->has_port()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::port(this), output);
  }

  // .google.protobuf.StringValue protocol = 4;
  if (this->has_protocol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::protocol(this), output);
  }

  // .google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
  if (this->has_semi_sync_slave_reply_enabled()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::semi_sync_slave_reply_enabled(this), output);
  }

  // .google.protobuf.BoolValue compressed_protocol = 6;
  if (this->has_compressed_protocol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::compressed_protocol(this), output);
  }

  // .google.protobuf.DoubleValue heartbeat_period = 7;
  if (this->has_heartbeat_period()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::heartbeat_period(this), output);
  }

  // .google.protobuf.StringValue password = 8;
  if (this->has_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::password(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.MasterInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.MasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue user = 1;
  if (this->has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::user(this), target);
  }

  // .google.protobuf.StringValue host = 2;
  if (this->has_host()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::host(this), target);
  }

  // .google.protobuf.Int32Value port = 3;
  if (this->has_port()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::port(this), target);
  }

  // .google.protobuf.StringValue protocol = 4;
  if (this->has_protocol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::protocol(this), target);
  }

  // .google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
  if (this->has_semi_sync_slave_reply_enabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::semi_sync_slave_reply_enabled(this), target);
  }

  // .google.protobuf.BoolValue compressed_protocol = 6;
  if (this->has_compressed_protocol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::compressed_protocol(this), target);
  }

  // .google.protobuf.DoubleValue heartbeat_period = 7;
  if (this->has_heartbeat_period()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::heartbeat_period(this), target);
  }

  // .google.protobuf.StringValue password = 8;
  if (this->has_password()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::password(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.MasterInfo)
  return target;
}

size_t MasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.MasterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .google.protobuf.StringValue host = 2;
  if (this->has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }

  // .google.protobuf.Int32Value port = 3;
  if (this->has_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *port_);
  }

  // .google.protobuf.StringValue protocol = 4;
  if (this->has_protocol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protocol_);
  }

  // .google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
  if (this->has_semi_sync_slave_reply_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *semi_sync_slave_reply_enabled_);
  }

  // .google.protobuf.BoolValue compressed_protocol = 6;
  if (this->has_compressed_protocol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compressed_protocol_);
  }

  // .google.protobuf.DoubleValue heartbeat_period = 7;
  if (this->has_heartbeat_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartbeat_period_);
  }

  // .google.protobuf.StringValue password = 8;
  if (this->has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.MasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.MasterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.MasterInfo)
    MergeFrom(*source);
  }
}

void MasterInfo::MergeFrom(const MasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.MasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.user());
  }
  if (from.has_host()) {
    mutable_host()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.host());
  }
  if (from.has_port()) {
    mutable_port()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from.port());
  }
  if (from.has_protocol()) {
    mutable_protocol()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.protocol());
  }
  if (from.has_semi_sync_slave_reply_enabled()) {
    mutable_semi_sync_slave_reply_enabled()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from.semi_sync_slave_reply_enabled());
  }
  if (from.has_compressed_protocol()) {
    mutable_compressed_protocol()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from.compressed_protocol());
  }
  if (from.has_heartbeat_period()) {
    mutable_heartbeat_period()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from.heartbeat_period());
  }
  if (from.has_password()) {
    mutable_password()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.password());
  }
}

void MasterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.MasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterInfo::CopyFrom(const MasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.MasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterInfo::IsInitialized() const {
  return true;
}

void MasterInfo::InternalSwap(MasterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
  swap(host_, other->host_);
  swap(port_, other->port_);
  swap(protocol_, other->protocol_);
  swap(semi_sync_slave_reply_enabled_, other->semi_sync_slave_reply_enabled_);
  swap(compressed_protocol_, other->compressed_protocol_);
  swap(heartbeat_period_, other->heartbeat_period_);
  swap(password_, other->password_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MasterStatus::InitAsDefaultInstance() {
  ::ripple_proto::_MasterStatus_default_instance_._instance.get_mutable()->master_info_ = const_cast< ::ripple_proto::MasterInfo*>(
      ::ripple_proto::MasterInfo::internal_default_instance());
  ::ripple_proto::_MasterStatus_default_instance_._instance.get_mutable()->server_version_ = const_cast< ::ripple_proto::ServerVersion*>(
      ::ripple_proto::ServerVersion::internal_default_instance());
}
class MasterStatus::_Internal {
 public:
  static const ::ripple_proto::MasterInfo& master_info(const MasterStatus* msg);
  static const ::ripple_proto::ServerVersion& server_version(const MasterStatus* msg);
};

const ::ripple_proto::MasterInfo&
MasterStatus::_Internal::master_info(const MasterStatus* msg) {
  return *msg->master_info_;
}
const ::ripple_proto::ServerVersion&
MasterStatus::_Internal::server_version(const MasterStatus* msg) {
  return *msg->server_version_;
}
MasterStatus::MasterStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.MasterStatus)
}
MasterStatus::MasterStatus(const MasterStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.server_name().empty()) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_master_info()) {
    master_info_ = new ::ripple_proto::MasterInfo(*from.master_info_);
  } else {
    master_info_ = nullptr;
  }
  if (from.has_server_version()) {
    server_version_ = new ::ripple_proto::ServerVersion(*from.server_version_);
  } else {
    server_version_ = nullptr;
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&semi_sync_slave_reply_active_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(semi_sync_slave_reply_active_));
  // @@protoc_insertion_point(copy_constructor:ripple_proto.MasterStatus)
}

void MasterStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MasterStatus_management_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&master_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&semi_sync_slave_reply_active_) -
      reinterpret_cast<char*>(&master_info_)) + sizeof(semi_sync_slave_reply_active_));
}

MasterStatus::~MasterStatus() {
  // @@protoc_insertion_point(destructor:ripple_proto.MasterStatus)
  SharedDtor();
}

void MasterStatus::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete master_info_;
  if (this != internal_default_instance()) delete server_version_;
}

void MasterStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterStatus& MasterStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterStatus_management_2eproto.base);
  return *internal_default_instance();
}


void MasterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.MasterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && master_info_ != nullptr) {
    delete master_info_;
  }
  master_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_version_ != nullptr) {
    delete server_version_;
  }
  server_version_ = nullptr;
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&semi_sync_slave_reply_active_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(semi_sync_slave_reply_active_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MasterStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ripple_proto.MasterStatus.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::ripple_proto::MasterStatus_State>(val));
        } else goto handle_unusual;
        continue;
      // .ripple_proto.MasterInfo master_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_master_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "ripple_proto.MasterStatus.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ripple_proto.ServerVersion server_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_server_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool semi_sync_master_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          semi_sync_master_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_server_name(), ptr, ctx, "ripple_proto.MasterStatus.server_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool semi_sync_slave_reply_active = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          semi_sync_slave_reply_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MasterStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.MasterStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ripple_proto.MasterStatus.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::ripple_proto::MasterStatus_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.MasterInfo master_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_master_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 server_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.MasterStatus.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ripple_proto.ServerVersion server_version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool semi_sync_master_enabled = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &semi_sync_master_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.MasterStatus.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool semi_sync_slave_reply_active = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &semi_sync_slave_reply_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.MasterStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.MasterStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MasterStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.MasterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ripple_proto.MasterStatus.State state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .ripple_proto.MasterInfo master_info = 2;
  if (this->has_master_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::master_info(this), output);
  }

  // int64 server_id = 3;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->server_id(), output);
  }

  // string uuid = 4;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.MasterStatus.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // .ripple_proto.ServerVersion server_version = 5;
  if (this->has_server_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::server_version(this), output);
  }

  // bool semi_sync_master_enabled = 6;
  if (this->semi_sync_master_enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->semi_sync_master_enabled(), output);
  }

  // string server_name = 7;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.MasterStatus.server_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->server_name(), output);
  }

  // bool semi_sync_slave_reply_active = 8;
  if (this->semi_sync_slave_reply_active() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->semi_sync_slave_reply_active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.MasterStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.MasterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ripple_proto.MasterStatus.State state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .ripple_proto.MasterInfo master_info = 2;
  if (this->has_master_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::master_info(this), target);
  }

  // int64 server_id = 3;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->server_id(), target);
  }

  // string uuid = 4;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.MasterStatus.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // .ripple_proto.ServerVersion server_version = 5;
  if (this->has_server_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::server_version(this), target);
  }

  // bool semi_sync_master_enabled = 6;
  if (this->semi_sync_master_enabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->semi_sync_master_enabled(), target);
  }

  // string server_name = 7;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.MasterStatus.server_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->server_name(), target);
  }

  // bool semi_sync_slave_reply_active = 8;
  if (this->semi_sync_slave_reply_active() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->semi_sync_slave_reply_active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.MasterStatus)
  return target;
}

size_t MasterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.MasterStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string server_name = 7;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // .ripple_proto.MasterInfo master_info = 2;
  if (this->has_master_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *master_info_);
  }

  // .ripple_proto.ServerVersion server_version = 5;
  if (this->has_server_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_version_);
  }

  // int64 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->server_id());
  }

  // .ripple_proto.MasterStatus.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // bool semi_sync_master_enabled = 6;
  if (this->semi_sync_master_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool semi_sync_slave_reply_active = 8;
  if (this->semi_sync_slave_reply_active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.MasterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.MasterStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.MasterStatus)
    MergeFrom(*source);
  }
}

void MasterStatus::MergeFrom(const MasterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.MasterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_master_info()) {
    mutable_master_info()->::ripple_proto::MasterInfo::MergeFrom(from.master_info());
  }
  if (from.has_server_version()) {
    mutable_server_version()->::ripple_proto::ServerVersion::MergeFrom(from.server_version());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.semi_sync_master_enabled() != 0) {
    set_semi_sync_master_enabled(from.semi_sync_master_enabled());
  }
  if (from.semi_sync_slave_reply_active() != 0) {
    set_semi_sync_slave_reply_active(from.semi_sync_slave_reply_active());
  }
}

void MasterStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.MasterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterStatus::CopyFrom(const MasterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.MasterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterStatus::IsInitialized() const {
  return true;
}

void MasterStatus::InternalSwap(MasterStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(master_info_, other->master_info_);
  swap(server_version_, other->server_version_);
  swap(server_id_, other->server_id_);
  swap(state_, other->state_);
  swap(semi_sync_master_enabled_, other->semi_sync_master_enabled_);
  swap(semi_sync_slave_reply_active_, other->semi_sync_slave_reply_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SlaveAddress::InitAsDefaultInstance() {
}
class SlaveAddress::_Internal {
 public:
};

SlaveAddress::SlaveAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.SlaveAddress)
}
SlaveAddress::SlaveAddress(const SlaveAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.server_name().empty()) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&port_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:ripple_proto.SlaveAddress)
}

void SlaveAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SlaveAddress_management_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&port_)) + sizeof(server_id_));
}

SlaveAddress::~SlaveAddress() {
  // @@protoc_insertion_point(destructor:ripple_proto.SlaveAddress)
  SharedDtor();
}

void SlaveAddress::SharedDtor() {
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SlaveAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlaveAddress& SlaveAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlaveAddress_management_2eproto.base);
  return *internal_default_instance();
}


void SlaveAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.SlaveAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&port_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SlaveAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_host(), ptr, ctx, "ripple_proto.SlaveAddress.host");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_server_name(), ptr, ctx, "ripple_proto.SlaveAddress.server_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SlaveAddress::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.SlaveAddress)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.SlaveAddress.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.SlaveAddress.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.SlaveAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.SlaveAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SlaveAddress::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.SlaveAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.SlaveAddress.host");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.SlaveAddress.server_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.SlaveAddress)
}

::PROTOBUF_NAMESPACE_ID::uint8* SlaveAddress::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.SlaveAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.SlaveAddress.host");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.SlaveAddress.server_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.SlaveAddress)
  return target;
}

size_t SlaveAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.SlaveAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlaveAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.SlaveAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const SlaveAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlaveAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.SlaveAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.SlaveAddress)
    MergeFrom(*source);
  }
}

void SlaveAddress::MergeFrom(const SlaveAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.SlaveAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void SlaveAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.SlaveAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveAddress::CopyFrom(const SlaveAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.SlaveAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveAddress::IsInitialized() const {
  return true;
}

void SlaveAddress::InternalSwap(SlaveAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlaveAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Slaves::InitAsDefaultInstance() {
}
class Slaves::_Internal {
 public:
};

Slaves::Slaves()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.Slaves)
}
Slaves::Slaves(const Slaves& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      slave_(from.slave_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ripple_proto.Slaves)
}

void Slaves::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Slaves_management_2eproto.base);
}

Slaves::~Slaves() {
  // @@protoc_insertion_point(destructor:ripple_proto.Slaves)
  SharedDtor();
}

void Slaves::SharedDtor() {
}

void Slaves::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Slaves& Slaves::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Slaves_management_2eproto.base);
  return *internal_default_instance();
}


void Slaves::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.Slaves)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slave_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Slaves::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ripple_proto.SlaveAddress slave = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_slave(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Slaves::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.Slaves)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ripple_proto.SlaveAddress slave = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_slave()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.Slaves)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.Slaves)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Slaves::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.Slaves)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ripple_proto.SlaveAddress slave = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slave_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->slave(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.Slaves)
}

::PROTOBUF_NAMESPACE_ID::uint8* Slaves::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.Slaves)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ripple_proto.SlaveAddress slave = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slave_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->slave(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.Slaves)
  return target;
}

size_t Slaves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.Slaves)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ripple_proto.SlaveAddress slave = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->slave_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->slave(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Slaves::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.Slaves)
  GOOGLE_DCHECK_NE(&from, this);
  const Slaves* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Slaves>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.Slaves)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.Slaves)
    MergeFrom(*source);
  }
}

void Slaves::MergeFrom(const Slaves& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.Slaves)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slave_.MergeFrom(from.slave_);
}

void Slaves::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.Slaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slaves::CopyFrom(const Slaves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.Slaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slaves::IsInitialized() const {
  return true;
}

void Slaves::InternalSwap(Slaves* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&slave_)->InternalSwap(CastToBase(&other->slave_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Slaves::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnOff::InitAsDefaultInstance() {
}
class OnOff::_Internal {
 public:
};

OnOff::OnOff()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.OnOff)
}
OnOff::OnOff(const OnOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  on_ = from.on_;
  // @@protoc_insertion_point(copy_constructor:ripple_proto.OnOff)
}

void OnOff::SharedCtor() {
  on_ = false;
}

OnOff::~OnOff() {
  // @@protoc_insertion_point(destructor:ripple_proto.OnOff)
  SharedDtor();
}

void OnOff::SharedDtor() {
}

void OnOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnOff& OnOff::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnOff_management_2eproto.base);
  return *internal_default_instance();
}


void OnOff::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.OnOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnOff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnOff::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.OnOff)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool on = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.OnOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.OnOff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnOff::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.OnOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.OnOff)
}

::PROTOBUF_NAMESPACE_ID::uint8* OnOff::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.OnOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.OnOff)
  return target;
}

size_t OnOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.OnOff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnOff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.OnOff)
  GOOGLE_DCHECK_NE(&from, this);
  const OnOff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnOff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.OnOff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.OnOff)
    MergeFrom(*source);
  }
}

void OnOff::MergeFrom(const OnOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.OnOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on() != 0) {
    set_on(from.on());
  }
}

void OnOff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.OnOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnOff::CopyFrom(const OnOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.OnOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnOff::IsInitialized() const {
  return true;
}

void OnOff::InternalSwap(OnOff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(on_, other->on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnOff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
};

Status::Status()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.info().empty()) {
    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:ripple_proto.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_management_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:ripple_proto.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_management_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_info(), ptr, ctx, "ripple_proto.Status.info");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Status::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.Status)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.Status.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.Status)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Status::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.Status.info");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.Status)
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.Status.info");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->info());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RippleInfo::InitAsDefaultInstance() {
}
class RippleInfo::_Internal {
 public:
};

RippleInfo::RippleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ripple_proto.RippleInfo)
}
RippleInfo::RippleInfo(const RippleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.server_name().empty()) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ripple_proto.RippleInfo)
}

void RippleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RippleInfo_management_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RippleInfo::~RippleInfo() {
  // @@protoc_insertion_point(destructor:ripple_proto.RippleInfo)
  SharedDtor();
}

void RippleInfo::SharedDtor() {
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RippleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RippleInfo& RippleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RippleInfo_management_2eproto.base);
  return *internal_default_instance();
}


void RippleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ripple_proto.RippleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RippleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_server_name(), ptr, ctx, "ripple_proto.RippleInfo.server_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RippleInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ripple_proto.RippleInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string server_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ripple_proto.RippleInfo.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ripple_proto.RippleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ripple_proto.RippleInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RippleInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ripple_proto.RippleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.RippleInfo.server_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ripple_proto.RippleInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RippleInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ripple_proto.RippleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ripple_proto.RippleInfo.server_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ripple_proto.RippleInfo)
  return target;
}

size_t RippleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ripple_proto.RippleInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ripple_proto.RippleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RippleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ripple_proto.RippleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ripple_proto.RippleInfo)
    MergeFrom(*source);
  }
}

void RippleInfo::MergeFrom(const RippleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ripple_proto.RippleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
}

void RippleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ripple_proto.RippleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleInfo::CopyFrom(const RippleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ripple_proto.RippleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleInfo::IsInitialized() const {
  return true;
}

void RippleInfo::InternalSwap(RippleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RippleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ripple_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ripple_proto::Empty* Arena::CreateMaybeMessage< ::ripple_proto::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::StartSlaveRequest* Arena::CreateMaybeMessage< ::ripple_proto::StartSlaveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::StartSlaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::StopSlaveRequest* Arena::CreateMaybeMessage< ::ripple_proto::StopSlaveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::StopSlaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::ServerVersion* Arena::CreateMaybeMessage< ::ripple_proto::ServerVersion >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::ServerVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::FilePosition* Arena::CreateMaybeMessage< ::ripple_proto::FilePosition >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::FilePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::GTID* Arena::CreateMaybeMessage< ::ripple_proto::GTID >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::GTID >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::GTIDStartPosition* Arena::CreateMaybeMessage< ::ripple_proto::GTIDStartPosition >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::GTIDStartPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::BinlogPosition* Arena::CreateMaybeMessage< ::ripple_proto::BinlogPosition >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::BinlogPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::MasterInfo* Arena::CreateMaybeMessage< ::ripple_proto::MasterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::MasterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::MasterStatus* Arena::CreateMaybeMessage< ::ripple_proto::MasterStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::MasterStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::SlaveAddress* Arena::CreateMaybeMessage< ::ripple_proto::SlaveAddress >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::SlaveAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::Slaves* Arena::CreateMaybeMessage< ::ripple_proto::Slaves >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::Slaves >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::OnOff* Arena::CreateMaybeMessage< ::ripple_proto::OnOff >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::OnOff >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::Status* Arena::CreateMaybeMessage< ::ripple_proto::Status >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ripple_proto::RippleInfo* Arena::CreateMaybeMessage< ::ripple_proto::RippleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ripple_proto::RippleInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
