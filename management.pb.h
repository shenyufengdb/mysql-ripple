// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_management_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_management_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_management_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_management_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_management_2eproto;
namespace ripple_proto {
class BinlogPosition;
class BinlogPositionDefaultTypeInternal;
extern BinlogPositionDefaultTypeInternal _BinlogPosition_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FilePosition;
class FilePositionDefaultTypeInternal;
extern FilePositionDefaultTypeInternal _FilePosition_default_instance_;
class GTID;
class GTIDDefaultTypeInternal;
extern GTIDDefaultTypeInternal _GTID_default_instance_;
class GTIDStartPosition;
class GTIDStartPositionDefaultTypeInternal;
extern GTIDStartPositionDefaultTypeInternal _GTIDStartPosition_default_instance_;
class MasterInfo;
class MasterInfoDefaultTypeInternal;
extern MasterInfoDefaultTypeInternal _MasterInfo_default_instance_;
class MasterStatus;
class MasterStatusDefaultTypeInternal;
extern MasterStatusDefaultTypeInternal _MasterStatus_default_instance_;
class OnOff;
class OnOffDefaultTypeInternal;
extern OnOffDefaultTypeInternal _OnOff_default_instance_;
class RippleInfo;
class RippleInfoDefaultTypeInternal;
extern RippleInfoDefaultTypeInternal _RippleInfo_default_instance_;
class ServerVersion;
class ServerVersionDefaultTypeInternal;
extern ServerVersionDefaultTypeInternal _ServerVersion_default_instance_;
class SlaveAddress;
class SlaveAddressDefaultTypeInternal;
extern SlaveAddressDefaultTypeInternal _SlaveAddress_default_instance_;
class Slaves;
class SlavesDefaultTypeInternal;
extern SlavesDefaultTypeInternal _Slaves_default_instance_;
class StartSlaveRequest;
class StartSlaveRequestDefaultTypeInternal;
extern StartSlaveRequestDefaultTypeInternal _StartSlaveRequest_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopSlaveRequest;
class StopSlaveRequestDefaultTypeInternal;
extern StopSlaveRequestDefaultTypeInternal _StopSlaveRequest_default_instance_;
}  // namespace ripple_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::ripple_proto::BinlogPosition* Arena::CreateMaybeMessage<::ripple_proto::BinlogPosition>(Arena*);
template<> ::ripple_proto::Empty* Arena::CreateMaybeMessage<::ripple_proto::Empty>(Arena*);
template<> ::ripple_proto::FilePosition* Arena::CreateMaybeMessage<::ripple_proto::FilePosition>(Arena*);
template<> ::ripple_proto::GTID* Arena::CreateMaybeMessage<::ripple_proto::GTID>(Arena*);
template<> ::ripple_proto::GTIDStartPosition* Arena::CreateMaybeMessage<::ripple_proto::GTIDStartPosition>(Arena*);
template<> ::ripple_proto::MasterInfo* Arena::CreateMaybeMessage<::ripple_proto::MasterInfo>(Arena*);
template<> ::ripple_proto::MasterStatus* Arena::CreateMaybeMessage<::ripple_proto::MasterStatus>(Arena*);
template<> ::ripple_proto::OnOff* Arena::CreateMaybeMessage<::ripple_proto::OnOff>(Arena*);
template<> ::ripple_proto::RippleInfo* Arena::CreateMaybeMessage<::ripple_proto::RippleInfo>(Arena*);
template<> ::ripple_proto::ServerVersion* Arena::CreateMaybeMessage<::ripple_proto::ServerVersion>(Arena*);
template<> ::ripple_proto::SlaveAddress* Arena::CreateMaybeMessage<::ripple_proto::SlaveAddress>(Arena*);
template<> ::ripple_proto::Slaves* Arena::CreateMaybeMessage<::ripple_proto::Slaves>(Arena*);
template<> ::ripple_proto::StartSlaveRequest* Arena::CreateMaybeMessage<::ripple_proto::StartSlaveRequest>(Arena*);
template<> ::ripple_proto::Status* Arena::CreateMaybeMessage<::ripple_proto::Status>(Arena*);
template<> ::ripple_proto::StopSlaveRequest* Arena::CreateMaybeMessage<::ripple_proto::StopSlaveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ripple_proto {

enum MasterStatus_State : int {
  MasterStatus_State_DISCONNECTED = 0,
  MasterStatus_State_CONNECTING = 1,
  MasterStatus_State_CONNECTED = 2,
  MasterStatus_State_MasterStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MasterStatus_State_MasterStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MasterStatus_State_IsValid(int value);
constexpr MasterStatus_State MasterStatus_State_State_MIN = MasterStatus_State_DISCONNECTED;
constexpr MasterStatus_State MasterStatus_State_State_MAX = MasterStatus_State_CONNECTED;
constexpr int MasterStatus_State_State_ARRAYSIZE = MasterStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MasterStatus_State_descriptor();
template<typename T>
inline const std::string& MasterStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MasterStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MasterStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MasterStatus_State_descriptor(), enum_t_value);
}
inline bool MasterStatus_State_Parse(
    const std::string& name, MasterStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MasterStatus_State>(
    MasterStatus_State_descriptor(), name, value);
}
// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ripple_proto.Empty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class StartSlaveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.StartSlaveRequest) */ {
 public:
  StartSlaveRequest();
  virtual ~StartSlaveRequest();

  StartSlaveRequest(const StartSlaveRequest& from);
  StartSlaveRequest(StartSlaveRequest&& from) noexcept
    : StartSlaveRequest() {
    *this = ::std::move(from);
  }

  inline StartSlaveRequest& operator=(const StartSlaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSlaveRequest& operator=(StartSlaveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSlaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSlaveRequest* internal_default_instance() {
    return reinterpret_cast<const StartSlaveRequest*>(
               &_StartSlaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartSlaveRequest& a, StartSlaveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSlaveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSlaveRequest* New() const final {
    return CreateMaybeMessage<StartSlaveRequest>(nullptr);
  }

  StartSlaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSlaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSlaveRequest& from);
  void MergeFrom(const StartSlaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSlaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.StartSlaveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdempotentFieldNumber = 1,
  };
  // bool idempotent = 1;
  void clear_idempotent();
  bool idempotent() const;
  void set_idempotent(bool value);

  // @@protoc_insertion_point(class_scope:ripple_proto.StartSlaveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool idempotent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class StopSlaveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.StopSlaveRequest) */ {
 public:
  StopSlaveRequest();
  virtual ~StopSlaveRequest();

  StopSlaveRequest(const StopSlaveRequest& from);
  StopSlaveRequest(StopSlaveRequest&& from) noexcept
    : StopSlaveRequest() {
    *this = ::std::move(from);
  }

  inline StopSlaveRequest& operator=(const StopSlaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSlaveRequest& operator=(StopSlaveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSlaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopSlaveRequest* internal_default_instance() {
    return reinterpret_cast<const StopSlaveRequest*>(
               &_StopSlaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopSlaveRequest& a, StopSlaveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopSlaveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSlaveRequest* New() const final {
    return CreateMaybeMessage<StopSlaveRequest>(nullptr);
  }

  StopSlaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSlaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSlaveRequest& from);
  void MergeFrom(const StopSlaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSlaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.StopSlaveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdempotentFieldNumber = 1,
  };
  // bool idempotent = 1;
  void clear_idempotent();
  bool idempotent() const;
  void set_idempotent(bool value);

  // @@protoc_insertion_point(class_scope:ripple_proto.StopSlaveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool idempotent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class ServerVersion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.ServerVersion) */ {
 public:
  ServerVersion();
  virtual ~ServerVersion();

  ServerVersion(const ServerVersion& from);
  ServerVersion(ServerVersion&& from) noexcept
    : ServerVersion() {
    *this = ::std::move(from);
  }

  inline ServerVersion& operator=(const ServerVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerVersion& operator=(ServerVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerVersion* internal_default_instance() {
    return reinterpret_cast<const ServerVersion*>(
               &_ServerVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerVersion& a, ServerVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerVersion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerVersion* New() const final {
    return CreateMaybeMessage<ServerVersion>(nullptr);
  }

  ServerVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerVersion& from);
  void MergeFrom(const ServerVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.ServerVersion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 4,
    kMajorVersionFieldNumber = 1,
    kMinorVersionFieldNumber = 2,
    kPatchLevelFieldNumber = 3,
  };
  // string comment = 4;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // int32 major_version = 1;
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::int32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 minor_version = 2;
  void clear_minor_version();
  ::PROTOBUF_NAMESPACE_ID::int32 minor_version() const;
  void set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 patch_level = 3;
  void clear_patch_level();
  ::PROTOBUF_NAMESPACE_ID::int32 patch_level() const;
  void set_patch_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ripple_proto.ServerVersion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int32 major_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 minor_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class FilePosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.FilePosition) */ {
 public:
  FilePosition();
  virtual ~FilePosition();

  FilePosition(const FilePosition& from);
  FilePosition(FilePosition&& from) noexcept
    : FilePosition() {
    *this = ::std::move(from);
  }

  inline FilePosition& operator=(const FilePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePosition& operator=(FilePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilePosition* internal_default_instance() {
    return reinterpret_cast<const FilePosition*>(
               &_FilePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FilePosition& a, FilePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePosition* New() const final {
    return CreateMaybeMessage<FilePosition>(nullptr);
  }

  FilePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePosition& from);
  void MergeFrom(const FilePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.FilePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:ripple_proto.FilePosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class GTID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.GTID) */ {
 public:
  GTID();
  virtual ~GTID();

  GTID(const GTID& from);
  GTID(GTID&& from) noexcept
    : GTID() {
    *this = ::std::move(from);
  }

  inline GTID& operator=(const GTID& from) {
    CopyFrom(from);
    return *this;
  }
  inline GTID& operator=(GTID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GTID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GTID* internal_default_instance() {
    return reinterpret_cast<const GTID*>(
               &_GTID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GTID& a, GTID& b) {
    a.Swap(&b);
  }
  inline void Swap(GTID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GTID* New() const final {
    return CreateMaybeMessage<GTID>(nullptr);
  }

  GTID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GTID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GTID& from);
  void MergeFrom(const GTID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GTID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.GTID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kSeqNoFieldNumber = 3,
    kDomainIdFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // uint64 server_id = 2;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 seq_no = 3;
  void clear_seq_no();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_no() const;
  void set_seq_no(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 domain_id = 4;
  void clear_domain_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 domain_id() const;
  void set_domain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ripple_proto.GTID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 domain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class GTIDStartPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.GTIDStartPosition) */ {
 public:
  GTIDStartPosition();
  virtual ~GTIDStartPosition();

  GTIDStartPosition(const GTIDStartPosition& from);
  GTIDStartPosition(GTIDStartPosition&& from) noexcept
    : GTIDStartPosition() {
    *this = ::std::move(from);
  }

  inline GTIDStartPosition& operator=(const GTIDStartPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GTIDStartPosition& operator=(GTIDStartPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GTIDStartPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GTIDStartPosition* internal_default_instance() {
    return reinterpret_cast<const GTIDStartPosition*>(
               &_GTIDStartPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GTIDStartPosition& a, GTIDStartPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(GTIDStartPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GTIDStartPosition* New() const final {
    return CreateMaybeMessage<GTIDStartPosition>(nullptr);
  }

  GTIDStartPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GTIDStartPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GTIDStartPosition& from);
  void MergeFrom(const GTIDStartPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GTIDStartPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.GTIDStartPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGtidFieldNumber = 1,
  };
  // repeated .ripple_proto.GTID gtid = 1;
  int gtid_size() const;
  void clear_gtid();
  ::ripple_proto::GTID* mutable_gtid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::GTID >*
      mutable_gtid();
  const ::ripple_proto::GTID& gtid(int index) const;
  ::ripple_proto::GTID* add_gtid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::GTID >&
      gtid() const;

  // @@protoc_insertion_point(class_scope:ripple_proto.GTIDStartPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::GTID > gtid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class BinlogPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.BinlogPosition) */ {
 public:
  BinlogPosition();
  virtual ~BinlogPosition();

  BinlogPosition(const BinlogPosition& from);
  BinlogPosition(BinlogPosition&& from) noexcept
    : BinlogPosition() {
    *this = ::std::move(from);
  }

  inline BinlogPosition& operator=(const BinlogPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinlogPosition& operator=(BinlogPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinlogPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinlogPosition* internal_default_instance() {
    return reinterpret_cast<const BinlogPosition*>(
               &_BinlogPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BinlogPosition& a, BinlogPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(BinlogPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinlogPosition* New() const final {
    return CreateMaybeMessage<BinlogPosition>(nullptr);
  }

  BinlogPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinlogPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinlogPosition& from);
  void MergeFrom(const BinlogPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinlogPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.BinlogPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestEventStartPositionFieldNumber = 1,
    kLatestEventEndPositionFieldNumber = 2,
    kLatestCompletedGtidPositionFieldNumber = 3,
    kLatestMasterPositionFieldNumber = 4,
    kNextMasterPositionFieldNumber = 5,
    kLatestCompletedGtidMasterPositionFieldNumber = 6,
    kLatestStartGtidFieldNumber = 7,
    kLatestCompletedGtidFieldNumber = 8,
    kGtidStartPositionFieldNumber = 9,
    kGtidPurgedFieldNumber = 10,
  };
  // .ripple_proto.FilePosition latest_event_start_position = 1;
  bool has_latest_event_start_position() const;
  void clear_latest_event_start_position();
  const ::ripple_proto::FilePosition& latest_event_start_position() const;
  ::ripple_proto::FilePosition* release_latest_event_start_position();
  ::ripple_proto::FilePosition* mutable_latest_event_start_position();
  void set_allocated_latest_event_start_position(::ripple_proto::FilePosition* latest_event_start_position);

  // .ripple_proto.FilePosition latest_event_end_position = 2;
  bool has_latest_event_end_position() const;
  void clear_latest_event_end_position();
  const ::ripple_proto::FilePosition& latest_event_end_position() const;
  ::ripple_proto::FilePosition* release_latest_event_end_position();
  ::ripple_proto::FilePosition* mutable_latest_event_end_position();
  void set_allocated_latest_event_end_position(::ripple_proto::FilePosition* latest_event_end_position);

  // .ripple_proto.FilePosition latest_completed_gtid_position = 3;
  bool has_latest_completed_gtid_position() const;
  void clear_latest_completed_gtid_position();
  const ::ripple_proto::FilePosition& latest_completed_gtid_position() const;
  ::ripple_proto::FilePosition* release_latest_completed_gtid_position();
  ::ripple_proto::FilePosition* mutable_latest_completed_gtid_position();
  void set_allocated_latest_completed_gtid_position(::ripple_proto::FilePosition* latest_completed_gtid_position);

  // .ripple_proto.FilePosition latest_master_position = 4;
  bool has_latest_master_position() const;
  void clear_latest_master_position();
  const ::ripple_proto::FilePosition& latest_master_position() const;
  ::ripple_proto::FilePosition* release_latest_master_position();
  ::ripple_proto::FilePosition* mutable_latest_master_position();
  void set_allocated_latest_master_position(::ripple_proto::FilePosition* latest_master_position);

  // .ripple_proto.FilePosition next_master_position = 5;
  bool has_next_master_position() const;
  void clear_next_master_position();
  const ::ripple_proto::FilePosition& next_master_position() const;
  ::ripple_proto::FilePosition* release_next_master_position();
  ::ripple_proto::FilePosition* mutable_next_master_position();
  void set_allocated_next_master_position(::ripple_proto::FilePosition* next_master_position);

  // .ripple_proto.FilePosition latest_completed_gtid_master_position = 6;
  bool has_latest_completed_gtid_master_position() const;
  void clear_latest_completed_gtid_master_position();
  const ::ripple_proto::FilePosition& latest_completed_gtid_master_position() const;
  ::ripple_proto::FilePosition* release_latest_completed_gtid_master_position();
  ::ripple_proto::FilePosition* mutable_latest_completed_gtid_master_position();
  void set_allocated_latest_completed_gtid_master_position(::ripple_proto::FilePosition* latest_completed_gtid_master_position);

  // .ripple_proto.GTID latest_start_gtid = 7;
  bool has_latest_start_gtid() const;
  void clear_latest_start_gtid();
  const ::ripple_proto::GTID& latest_start_gtid() const;
  ::ripple_proto::GTID* release_latest_start_gtid();
  ::ripple_proto::GTID* mutable_latest_start_gtid();
  void set_allocated_latest_start_gtid(::ripple_proto::GTID* latest_start_gtid);

  // .ripple_proto.GTID latest_completed_gtid = 8;
  bool has_latest_completed_gtid() const;
  void clear_latest_completed_gtid();
  const ::ripple_proto::GTID& latest_completed_gtid() const;
  ::ripple_proto::GTID* release_latest_completed_gtid();
  ::ripple_proto::GTID* mutable_latest_completed_gtid();
  void set_allocated_latest_completed_gtid(::ripple_proto::GTID* latest_completed_gtid);

  // .ripple_proto.GTIDStartPosition gtid_start_position = 9;
  bool has_gtid_start_position() const;
  void clear_gtid_start_position();
  const ::ripple_proto::GTIDStartPosition& gtid_start_position() const;
  ::ripple_proto::GTIDStartPosition* release_gtid_start_position();
  ::ripple_proto::GTIDStartPosition* mutable_gtid_start_position();
  void set_allocated_gtid_start_position(::ripple_proto::GTIDStartPosition* gtid_start_position);

  // .ripple_proto.GTIDStartPosition gtid_purged = 10;
  bool has_gtid_purged() const;
  void clear_gtid_purged();
  const ::ripple_proto::GTIDStartPosition& gtid_purged() const;
  ::ripple_proto::GTIDStartPosition* release_gtid_purged();
  ::ripple_proto::GTIDStartPosition* mutable_gtid_purged();
  void set_allocated_gtid_purged(::ripple_proto::GTIDStartPosition* gtid_purged);

  // @@protoc_insertion_point(class_scope:ripple_proto.BinlogPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ripple_proto::FilePosition* latest_event_start_position_;
  ::ripple_proto::FilePosition* latest_event_end_position_;
  ::ripple_proto::FilePosition* latest_completed_gtid_position_;
  ::ripple_proto::FilePosition* latest_master_position_;
  ::ripple_proto::FilePosition* next_master_position_;
  ::ripple_proto::FilePosition* latest_completed_gtid_master_position_;
  ::ripple_proto::GTID* latest_start_gtid_;
  ::ripple_proto::GTID* latest_completed_gtid_;
  ::ripple_proto::GTIDStartPosition* gtid_start_position_;
  ::ripple_proto::GTIDStartPosition* gtid_purged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class MasterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.MasterInfo) */ {
 public:
  MasterInfo();
  virtual ~MasterInfo();

  MasterInfo(const MasterInfo& from);
  MasterInfo(MasterInfo&& from) noexcept
    : MasterInfo() {
    *this = ::std::move(from);
  }

  inline MasterInfo& operator=(const MasterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterInfo& operator=(MasterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MasterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterInfo* internal_default_instance() {
    return reinterpret_cast<const MasterInfo*>(
               &_MasterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MasterInfo& a, MasterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MasterInfo* New() const final {
    return CreateMaybeMessage<MasterInfo>(nullptr);
  }

  MasterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterInfo& from);
  void MergeFrom(const MasterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.MasterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kHostFieldNumber = 2,
    kPortFieldNumber = 3,
    kProtocolFieldNumber = 4,
    kSemiSyncSlaveReplyEnabledFieldNumber = 5,
    kCompressedProtocolFieldNumber = 6,
    kHeartbeatPeriodFieldNumber = 7,
    kPasswordFieldNumber = 8,
  };
  // .google.protobuf.StringValue user = 1;
  bool has_user() const;
  void clear_user();
  const PROTOBUF_NAMESPACE_ID::StringValue& user() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_user();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_user();
  void set_allocated_user(PROTOBUF_NAMESPACE_ID::StringValue* user);

  // .google.protobuf.StringValue host = 2;
  bool has_host() const;
  void clear_host();
  const PROTOBUF_NAMESPACE_ID::StringValue& host() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_host();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_host();
  void set_allocated_host(PROTOBUF_NAMESPACE_ID::StringValue* host);

  // .google.protobuf.Int32Value port = 3;
  bool has_port() const;
  void clear_port();
  const PROTOBUF_NAMESPACE_ID::Int32Value& port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_port();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_port();
  void set_allocated_port(PROTOBUF_NAMESPACE_ID::Int32Value* port);

  // .google.protobuf.StringValue protocol = 4;
  bool has_protocol() const;
  void clear_protocol();
  const PROTOBUF_NAMESPACE_ID::StringValue& protocol() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_protocol();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_protocol();
  void set_allocated_protocol(PROTOBUF_NAMESPACE_ID::StringValue* protocol);

  // .google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
  bool has_semi_sync_slave_reply_enabled() const;
  void clear_semi_sync_slave_reply_enabled();
  const PROTOBUF_NAMESPACE_ID::BoolValue& semi_sync_slave_reply_enabled() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_semi_sync_slave_reply_enabled();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_semi_sync_slave_reply_enabled();
  void set_allocated_semi_sync_slave_reply_enabled(PROTOBUF_NAMESPACE_ID::BoolValue* semi_sync_slave_reply_enabled);

  // .google.protobuf.BoolValue compressed_protocol = 6;
  bool has_compressed_protocol() const;
  void clear_compressed_protocol();
  const PROTOBUF_NAMESPACE_ID::BoolValue& compressed_protocol() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_compressed_protocol();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_compressed_protocol();
  void set_allocated_compressed_protocol(PROTOBUF_NAMESPACE_ID::BoolValue* compressed_protocol);

  // .google.protobuf.DoubleValue heartbeat_period = 7;
  bool has_heartbeat_period() const;
  void clear_heartbeat_period();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& heartbeat_period() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_heartbeat_period();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_heartbeat_period();
  void set_allocated_heartbeat_period(PROTOBUF_NAMESPACE_ID::DoubleValue* heartbeat_period);

  // .google.protobuf.StringValue password = 8;
  bool has_password() const;
  void clear_password();
  const PROTOBUF_NAMESPACE_ID::StringValue& password() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_password();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_password();
  void set_allocated_password(PROTOBUF_NAMESPACE_ID::StringValue* password);

  // @@protoc_insertion_point(class_scope:ripple_proto.MasterInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::StringValue* user_;
  PROTOBUF_NAMESPACE_ID::StringValue* host_;
  PROTOBUF_NAMESPACE_ID::Int32Value* port_;
  PROTOBUF_NAMESPACE_ID::StringValue* protocol_;
  PROTOBUF_NAMESPACE_ID::BoolValue* semi_sync_slave_reply_enabled_;
  PROTOBUF_NAMESPACE_ID::BoolValue* compressed_protocol_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* heartbeat_period_;
  PROTOBUF_NAMESPACE_ID::StringValue* password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class MasterStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.MasterStatus) */ {
 public:
  MasterStatus();
  virtual ~MasterStatus();

  MasterStatus(const MasterStatus& from);
  MasterStatus(MasterStatus&& from) noexcept
    : MasterStatus() {
    *this = ::std::move(from);
  }

  inline MasterStatus& operator=(const MasterStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterStatus& operator=(MasterStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MasterStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterStatus* internal_default_instance() {
    return reinterpret_cast<const MasterStatus*>(
               &_MasterStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MasterStatus& a, MasterStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MasterStatus* New() const final {
    return CreateMaybeMessage<MasterStatus>(nullptr);
  }

  MasterStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterStatus& from);
  void MergeFrom(const MasterStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.MasterStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MasterStatus_State State;
  static constexpr State DISCONNECTED =
    MasterStatus_State_DISCONNECTED;
  static constexpr State CONNECTING =
    MasterStatus_State_CONNECTING;
  static constexpr State CONNECTED =
    MasterStatus_State_CONNECTED;
  static inline bool State_IsValid(int value) {
    return MasterStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    MasterStatus_State_State_MIN;
  static constexpr State State_MAX =
    MasterStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    MasterStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return MasterStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return MasterStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return MasterStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 4,
    kServerNameFieldNumber = 7,
    kMasterInfoFieldNumber = 2,
    kServerVersionFieldNumber = 5,
    kServerIdFieldNumber = 3,
    kStateFieldNumber = 1,
    kSemiSyncMasterEnabledFieldNumber = 6,
    kSemiSyncSlaveReplyActiveFieldNumber = 8,
  };
  // string uuid = 4;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // string server_name = 7;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);

  // .ripple_proto.MasterInfo master_info = 2;
  bool has_master_info() const;
  void clear_master_info();
  const ::ripple_proto::MasterInfo& master_info() const;
  ::ripple_proto::MasterInfo* release_master_info();
  ::ripple_proto::MasterInfo* mutable_master_info();
  void set_allocated_master_info(::ripple_proto::MasterInfo* master_info);

  // .ripple_proto.ServerVersion server_version = 5;
  bool has_server_version() const;
  void clear_server_version();
  const ::ripple_proto::ServerVersion& server_version() const;
  ::ripple_proto::ServerVersion* release_server_version();
  ::ripple_proto::ServerVersion* mutable_server_version();
  void set_allocated_server_version(::ripple_proto::ServerVersion* server_version);

  // int64 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .ripple_proto.MasterStatus.State state = 1;
  void clear_state();
  ::ripple_proto::MasterStatus_State state() const;
  void set_state(::ripple_proto::MasterStatus_State value);

  // bool semi_sync_master_enabled = 6;
  void clear_semi_sync_master_enabled();
  bool semi_sync_master_enabled() const;
  void set_semi_sync_master_enabled(bool value);

  // bool semi_sync_slave_reply_active = 8;
  void clear_semi_sync_slave_reply_active();
  bool semi_sync_slave_reply_active() const;
  void set_semi_sync_slave_reply_active(bool value);

  // @@protoc_insertion_point(class_scope:ripple_proto.MasterStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::ripple_proto::MasterInfo* master_info_;
  ::ripple_proto::ServerVersion* server_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_id_;
  int state_;
  bool semi_sync_master_enabled_;
  bool semi_sync_slave_reply_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class SlaveAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.SlaveAddress) */ {
 public:
  SlaveAddress();
  virtual ~SlaveAddress();

  SlaveAddress(const SlaveAddress& from);
  SlaveAddress(SlaveAddress&& from) noexcept
    : SlaveAddress() {
    *this = ::std::move(from);
  }

  inline SlaveAddress& operator=(const SlaveAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlaveAddress& operator=(SlaveAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlaveAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlaveAddress* internal_default_instance() {
    return reinterpret_cast<const SlaveAddress*>(
               &_SlaveAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SlaveAddress& a, SlaveAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(SlaveAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlaveAddress* New() const final {
    return CreateMaybeMessage<SlaveAddress>(nullptr);
  }

  SlaveAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlaveAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlaveAddress& from);
  void MergeFrom(const SlaveAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlaveAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.SlaveAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kServerNameFieldNumber = 4,
    kPortFieldNumber = 2,
    kServerIdFieldNumber = 3,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // string server_name = 4;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ripple_proto.SlaveAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class Slaves :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.Slaves) */ {
 public:
  Slaves();
  virtual ~Slaves();

  Slaves(const Slaves& from);
  Slaves(Slaves&& from) noexcept
    : Slaves() {
    *this = ::std::move(from);
  }

  inline Slaves& operator=(const Slaves& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slaves& operator=(Slaves&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slaves& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slaves* internal_default_instance() {
    return reinterpret_cast<const Slaves*>(
               &_Slaves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Slaves& a, Slaves& b) {
    a.Swap(&b);
  }
  inline void Swap(Slaves* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slaves* New() const final {
    return CreateMaybeMessage<Slaves>(nullptr);
  }

  Slaves* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slaves>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slaves& from);
  void MergeFrom(const Slaves& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slaves* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.Slaves";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlaveFieldNumber = 1,
  };
  // repeated .ripple_proto.SlaveAddress slave = 1;
  int slave_size() const;
  void clear_slave();
  ::ripple_proto::SlaveAddress* mutable_slave(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::SlaveAddress >*
      mutable_slave();
  const ::ripple_proto::SlaveAddress& slave(int index) const;
  ::ripple_proto::SlaveAddress* add_slave();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::SlaveAddress >&
      slave() const;

  // @@protoc_insertion_point(class_scope:ripple_proto.Slaves)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::SlaveAddress > slave_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class OnOff :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.OnOff) */ {
 public:
  OnOff();
  virtual ~OnOff();

  OnOff(const OnOff& from);
  OnOff(OnOff&& from) noexcept
    : OnOff() {
    *this = ::std::move(from);
  }

  inline OnOff& operator=(const OnOff& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnOff& operator=(OnOff&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnOff& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnOff* internal_default_instance() {
    return reinterpret_cast<const OnOff*>(
               &_OnOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OnOff& a, OnOff& b) {
    a.Swap(&b);
  }
  inline void Swap(OnOff* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnOff* New() const final {
    return CreateMaybeMessage<OnOff>(nullptr);
  }

  OnOff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnOff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnOff& from);
  void MergeFrom(const OnOff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnOff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.OnOff";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnFieldNumber = 1,
  };
  // bool on = 1;
  void clear_on();
  bool on() const;
  void set_on(bool value);

  // @@protoc_insertion_point(class_scope:ripple_proto.OnOff)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class Status :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.Status";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string info = 2;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ripple_proto.Status)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// -------------------------------------------------------------------

class RippleInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ripple_proto.RippleInfo) */ {
 public:
  RippleInfo();
  virtual ~RippleInfo();

  RippleInfo(const RippleInfo& from);
  RippleInfo(RippleInfo&& from) noexcept
    : RippleInfo() {
    *this = ::std::move(from);
  }

  inline RippleInfo& operator=(const RippleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RippleInfo& operator=(RippleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RippleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RippleInfo* internal_default_instance() {
    return reinterpret_cast<const RippleInfo*>(
               &_RippleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RippleInfo& a, RippleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RippleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RippleInfo* New() const final {
    return CreateMaybeMessage<RippleInfo>(nullptr);
  }

  RippleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RippleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RippleInfo& from);
  void MergeFrom(const RippleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RippleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ripple_proto.RippleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_management_2eproto);
    return ::descriptor_table_management_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
  };
  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);

  // @@protoc_insertion_point(class_scope:ripple_proto.RippleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_management_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// StartSlaveRequest

// bool idempotent = 1;
inline void StartSlaveRequest::clear_idempotent() {
  idempotent_ = false;
}
inline bool StartSlaveRequest::idempotent() const {
  // @@protoc_insertion_point(field_get:ripple_proto.StartSlaveRequest.idempotent)
  return idempotent_;
}
inline void StartSlaveRequest::set_idempotent(bool value) {
  
  idempotent_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.StartSlaveRequest.idempotent)
}

// -------------------------------------------------------------------

// StopSlaveRequest

// bool idempotent = 1;
inline void StopSlaveRequest::clear_idempotent() {
  idempotent_ = false;
}
inline bool StopSlaveRequest::idempotent() const {
  // @@protoc_insertion_point(field_get:ripple_proto.StopSlaveRequest.idempotent)
  return idempotent_;
}
inline void StopSlaveRequest::set_idempotent(bool value) {
  
  idempotent_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.StopSlaveRequest.idempotent)
}

// -------------------------------------------------------------------

// ServerVersion

// int32 major_version = 1;
inline void ServerVersion::clear_major_version() {
  major_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerVersion::major_version() const {
  // @@protoc_insertion_point(field_get:ripple_proto.ServerVersion.major_version)
  return major_version_;
}
inline void ServerVersion::set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.ServerVersion.major_version)
}

// int32 minor_version = 2;
inline void ServerVersion::clear_minor_version() {
  minor_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerVersion::minor_version() const {
  // @@protoc_insertion_point(field_get:ripple_proto.ServerVersion.minor_version)
  return minor_version_;
}
inline void ServerVersion::set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.ServerVersion.minor_version)
}

// int32 patch_level = 3;
inline void ServerVersion::clear_patch_level() {
  patch_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerVersion::patch_level() const {
  // @@protoc_insertion_point(field_get:ripple_proto.ServerVersion.patch_level)
  return patch_level_;
}
inline void ServerVersion::set_patch_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  patch_level_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.ServerVersion.patch_level)
}

// string comment = 4;
inline void ServerVersion::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerVersion::comment() const {
  // @@protoc_insertion_point(field_get:ripple_proto.ServerVersion.comment)
  return comment_.GetNoArena();
}
inline void ServerVersion::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.ServerVersion.comment)
}
inline void ServerVersion::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.ServerVersion.comment)
}
inline void ServerVersion::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.ServerVersion.comment)
}
inline void ServerVersion::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.ServerVersion.comment)
}
inline std::string* ServerVersion::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.ServerVersion.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerVersion::release_comment() {
  // @@protoc_insertion_point(field_release:ripple_proto.ServerVersion.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerVersion::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.ServerVersion.comment)
}

// -------------------------------------------------------------------

// FilePosition

// string filename = 1;
inline void FilePosition::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FilePosition::filename() const {
  // @@protoc_insertion_point(field_get:ripple_proto.FilePosition.filename)
  return filename_.GetNoArena();
}
inline void FilePosition::set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.FilePosition.filename)
}
inline void FilePosition::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.FilePosition.filename)
}
inline void FilePosition::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.FilePosition.filename)
}
inline void FilePosition::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.FilePosition.filename)
}
inline std::string* FilePosition::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.FilePosition.filename)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FilePosition::release_filename() {
  // @@protoc_insertion_point(field_release:ripple_proto.FilePosition.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FilePosition::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.FilePosition.filename)
}

// uint64 offset = 2;
inline void FilePosition::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FilePosition::offset() const {
  // @@protoc_insertion_point(field_get:ripple_proto.FilePosition.offset)
  return offset_;
}
inline void FilePosition::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.FilePosition.offset)
}

// -------------------------------------------------------------------

// GTID

// string uuid = 1;
inline void GTID::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GTID::uuid() const {
  // @@protoc_insertion_point(field_get:ripple_proto.GTID.uuid)
  return uuid_.GetNoArena();
}
inline void GTID::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.GTID.uuid)
}
inline void GTID::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.GTID.uuid)
}
inline void GTID::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.GTID.uuid)
}
inline void GTID::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.GTID.uuid)
}
inline std::string* GTID::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.GTID.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GTID::release_uuid() {
  // @@protoc_insertion_point(field_release:ripple_proto.GTID.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GTID::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.GTID.uuid)
}

// uint64 server_id = 2;
inline void GTID::clear_server_id() {
  server_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GTID::server_id() const {
  // @@protoc_insertion_point(field_get:ripple_proto.GTID.server_id)
  return server_id_;
}
inline void GTID::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.GTID.server_id)
}

// uint64 seq_no = 3;
inline void GTID::clear_seq_no() {
  seq_no_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GTID::seq_no() const {
  // @@protoc_insertion_point(field_get:ripple_proto.GTID.seq_no)
  return seq_no_;
}
inline void GTID::set_seq_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_no_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.GTID.seq_no)
}

// uint32 domain_id = 4;
inline void GTID::clear_domain_id() {
  domain_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GTID::domain_id() const {
  // @@protoc_insertion_point(field_get:ripple_proto.GTID.domain_id)
  return domain_id_;
}
inline void GTID::set_domain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.GTID.domain_id)
}

// -------------------------------------------------------------------

// GTIDStartPosition

// repeated .ripple_proto.GTID gtid = 1;
inline int GTIDStartPosition::gtid_size() const {
  return gtid_.size();
}
inline void GTIDStartPosition::clear_gtid() {
  gtid_.Clear();
}
inline ::ripple_proto::GTID* GTIDStartPosition::mutable_gtid(int index) {
  // @@protoc_insertion_point(field_mutable:ripple_proto.GTIDStartPosition.gtid)
  return gtid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::GTID >*
GTIDStartPosition::mutable_gtid() {
  // @@protoc_insertion_point(field_mutable_list:ripple_proto.GTIDStartPosition.gtid)
  return &gtid_;
}
inline const ::ripple_proto::GTID& GTIDStartPosition::gtid(int index) const {
  // @@protoc_insertion_point(field_get:ripple_proto.GTIDStartPosition.gtid)
  return gtid_.Get(index);
}
inline ::ripple_proto::GTID* GTIDStartPosition::add_gtid() {
  // @@protoc_insertion_point(field_add:ripple_proto.GTIDStartPosition.gtid)
  return gtid_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::GTID >&
GTIDStartPosition::gtid() const {
  // @@protoc_insertion_point(field_list:ripple_proto.GTIDStartPosition.gtid)
  return gtid_;
}

// -------------------------------------------------------------------

// BinlogPosition

// .ripple_proto.FilePosition latest_event_start_position = 1;
inline bool BinlogPosition::has_latest_event_start_position() const {
  return this != internal_default_instance() && latest_event_start_position_ != nullptr;
}
inline void BinlogPosition::clear_latest_event_start_position() {
  if (GetArenaNoVirtual() == nullptr && latest_event_start_position_ != nullptr) {
    delete latest_event_start_position_;
  }
  latest_event_start_position_ = nullptr;
}
inline const ::ripple_proto::FilePosition& BinlogPosition::latest_event_start_position() const {
  const ::ripple_proto::FilePosition* p = latest_event_start_position_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.latest_event_start_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::FilePosition*>(
      &::ripple_proto::_FilePosition_default_instance_);
}
inline ::ripple_proto::FilePosition* BinlogPosition::release_latest_event_start_position() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.latest_event_start_position)
  
  ::ripple_proto::FilePosition* temp = latest_event_start_position_;
  latest_event_start_position_ = nullptr;
  return temp;
}
inline ::ripple_proto::FilePosition* BinlogPosition::mutable_latest_event_start_position() {
  
  if (latest_event_start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::FilePosition>(GetArenaNoVirtual());
    latest_event_start_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.latest_event_start_position)
  return latest_event_start_position_;
}
inline void BinlogPosition::set_allocated_latest_event_start_position(::ripple_proto::FilePosition* latest_event_start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latest_event_start_position_;
  }
  if (latest_event_start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_event_start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_event_start_position, submessage_arena);
    }
    
  } else {
    
  }
  latest_event_start_position_ = latest_event_start_position;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.latest_event_start_position)
}

// .ripple_proto.FilePosition latest_event_end_position = 2;
inline bool BinlogPosition::has_latest_event_end_position() const {
  return this != internal_default_instance() && latest_event_end_position_ != nullptr;
}
inline void BinlogPosition::clear_latest_event_end_position() {
  if (GetArenaNoVirtual() == nullptr && latest_event_end_position_ != nullptr) {
    delete latest_event_end_position_;
  }
  latest_event_end_position_ = nullptr;
}
inline const ::ripple_proto::FilePosition& BinlogPosition::latest_event_end_position() const {
  const ::ripple_proto::FilePosition* p = latest_event_end_position_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.latest_event_end_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::FilePosition*>(
      &::ripple_proto::_FilePosition_default_instance_);
}
inline ::ripple_proto::FilePosition* BinlogPosition::release_latest_event_end_position() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.latest_event_end_position)
  
  ::ripple_proto::FilePosition* temp = latest_event_end_position_;
  latest_event_end_position_ = nullptr;
  return temp;
}
inline ::ripple_proto::FilePosition* BinlogPosition::mutable_latest_event_end_position() {
  
  if (latest_event_end_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::FilePosition>(GetArenaNoVirtual());
    latest_event_end_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.latest_event_end_position)
  return latest_event_end_position_;
}
inline void BinlogPosition::set_allocated_latest_event_end_position(::ripple_proto::FilePosition* latest_event_end_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latest_event_end_position_;
  }
  if (latest_event_end_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_event_end_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_event_end_position, submessage_arena);
    }
    
  } else {
    
  }
  latest_event_end_position_ = latest_event_end_position;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.latest_event_end_position)
}

// .ripple_proto.FilePosition latest_completed_gtid_position = 3;
inline bool BinlogPosition::has_latest_completed_gtid_position() const {
  return this != internal_default_instance() && latest_completed_gtid_position_ != nullptr;
}
inline void BinlogPosition::clear_latest_completed_gtid_position() {
  if (GetArenaNoVirtual() == nullptr && latest_completed_gtid_position_ != nullptr) {
    delete latest_completed_gtid_position_;
  }
  latest_completed_gtid_position_ = nullptr;
}
inline const ::ripple_proto::FilePosition& BinlogPosition::latest_completed_gtid_position() const {
  const ::ripple_proto::FilePosition* p = latest_completed_gtid_position_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.latest_completed_gtid_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::FilePosition*>(
      &::ripple_proto::_FilePosition_default_instance_);
}
inline ::ripple_proto::FilePosition* BinlogPosition::release_latest_completed_gtid_position() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.latest_completed_gtid_position)
  
  ::ripple_proto::FilePosition* temp = latest_completed_gtid_position_;
  latest_completed_gtid_position_ = nullptr;
  return temp;
}
inline ::ripple_proto::FilePosition* BinlogPosition::mutable_latest_completed_gtid_position() {
  
  if (latest_completed_gtid_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::FilePosition>(GetArenaNoVirtual());
    latest_completed_gtid_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.latest_completed_gtid_position)
  return latest_completed_gtid_position_;
}
inline void BinlogPosition::set_allocated_latest_completed_gtid_position(::ripple_proto::FilePosition* latest_completed_gtid_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latest_completed_gtid_position_;
  }
  if (latest_completed_gtid_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_completed_gtid_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_completed_gtid_position, submessage_arena);
    }
    
  } else {
    
  }
  latest_completed_gtid_position_ = latest_completed_gtid_position;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.latest_completed_gtid_position)
}

// .ripple_proto.FilePosition latest_master_position = 4;
inline bool BinlogPosition::has_latest_master_position() const {
  return this != internal_default_instance() && latest_master_position_ != nullptr;
}
inline void BinlogPosition::clear_latest_master_position() {
  if (GetArenaNoVirtual() == nullptr && latest_master_position_ != nullptr) {
    delete latest_master_position_;
  }
  latest_master_position_ = nullptr;
}
inline const ::ripple_proto::FilePosition& BinlogPosition::latest_master_position() const {
  const ::ripple_proto::FilePosition* p = latest_master_position_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.latest_master_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::FilePosition*>(
      &::ripple_proto::_FilePosition_default_instance_);
}
inline ::ripple_proto::FilePosition* BinlogPosition::release_latest_master_position() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.latest_master_position)
  
  ::ripple_proto::FilePosition* temp = latest_master_position_;
  latest_master_position_ = nullptr;
  return temp;
}
inline ::ripple_proto::FilePosition* BinlogPosition::mutable_latest_master_position() {
  
  if (latest_master_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::FilePosition>(GetArenaNoVirtual());
    latest_master_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.latest_master_position)
  return latest_master_position_;
}
inline void BinlogPosition::set_allocated_latest_master_position(::ripple_proto::FilePosition* latest_master_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latest_master_position_;
  }
  if (latest_master_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_master_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_master_position, submessage_arena);
    }
    
  } else {
    
  }
  latest_master_position_ = latest_master_position;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.latest_master_position)
}

// .ripple_proto.FilePosition next_master_position = 5;
inline bool BinlogPosition::has_next_master_position() const {
  return this != internal_default_instance() && next_master_position_ != nullptr;
}
inline void BinlogPosition::clear_next_master_position() {
  if (GetArenaNoVirtual() == nullptr && next_master_position_ != nullptr) {
    delete next_master_position_;
  }
  next_master_position_ = nullptr;
}
inline const ::ripple_proto::FilePosition& BinlogPosition::next_master_position() const {
  const ::ripple_proto::FilePosition* p = next_master_position_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.next_master_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::FilePosition*>(
      &::ripple_proto::_FilePosition_default_instance_);
}
inline ::ripple_proto::FilePosition* BinlogPosition::release_next_master_position() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.next_master_position)
  
  ::ripple_proto::FilePosition* temp = next_master_position_;
  next_master_position_ = nullptr;
  return temp;
}
inline ::ripple_proto::FilePosition* BinlogPosition::mutable_next_master_position() {
  
  if (next_master_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::FilePosition>(GetArenaNoVirtual());
    next_master_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.next_master_position)
  return next_master_position_;
}
inline void BinlogPosition::set_allocated_next_master_position(::ripple_proto::FilePosition* next_master_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete next_master_position_;
  }
  if (next_master_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      next_master_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_master_position, submessage_arena);
    }
    
  } else {
    
  }
  next_master_position_ = next_master_position;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.next_master_position)
}

// .ripple_proto.FilePosition latest_completed_gtid_master_position = 6;
inline bool BinlogPosition::has_latest_completed_gtid_master_position() const {
  return this != internal_default_instance() && latest_completed_gtid_master_position_ != nullptr;
}
inline void BinlogPosition::clear_latest_completed_gtid_master_position() {
  if (GetArenaNoVirtual() == nullptr && latest_completed_gtid_master_position_ != nullptr) {
    delete latest_completed_gtid_master_position_;
  }
  latest_completed_gtid_master_position_ = nullptr;
}
inline const ::ripple_proto::FilePosition& BinlogPosition::latest_completed_gtid_master_position() const {
  const ::ripple_proto::FilePosition* p = latest_completed_gtid_master_position_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.latest_completed_gtid_master_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::FilePosition*>(
      &::ripple_proto::_FilePosition_default_instance_);
}
inline ::ripple_proto::FilePosition* BinlogPosition::release_latest_completed_gtid_master_position() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.latest_completed_gtid_master_position)
  
  ::ripple_proto::FilePosition* temp = latest_completed_gtid_master_position_;
  latest_completed_gtid_master_position_ = nullptr;
  return temp;
}
inline ::ripple_proto::FilePosition* BinlogPosition::mutable_latest_completed_gtid_master_position() {
  
  if (latest_completed_gtid_master_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::FilePosition>(GetArenaNoVirtual());
    latest_completed_gtid_master_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.latest_completed_gtid_master_position)
  return latest_completed_gtid_master_position_;
}
inline void BinlogPosition::set_allocated_latest_completed_gtid_master_position(::ripple_proto::FilePosition* latest_completed_gtid_master_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latest_completed_gtid_master_position_;
  }
  if (latest_completed_gtid_master_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_completed_gtid_master_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_completed_gtid_master_position, submessage_arena);
    }
    
  } else {
    
  }
  latest_completed_gtid_master_position_ = latest_completed_gtid_master_position;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.latest_completed_gtid_master_position)
}

// .ripple_proto.GTID latest_start_gtid = 7;
inline bool BinlogPosition::has_latest_start_gtid() const {
  return this != internal_default_instance() && latest_start_gtid_ != nullptr;
}
inline void BinlogPosition::clear_latest_start_gtid() {
  if (GetArenaNoVirtual() == nullptr && latest_start_gtid_ != nullptr) {
    delete latest_start_gtid_;
  }
  latest_start_gtid_ = nullptr;
}
inline const ::ripple_proto::GTID& BinlogPosition::latest_start_gtid() const {
  const ::ripple_proto::GTID* p = latest_start_gtid_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.latest_start_gtid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::GTID*>(
      &::ripple_proto::_GTID_default_instance_);
}
inline ::ripple_proto::GTID* BinlogPosition::release_latest_start_gtid() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.latest_start_gtid)
  
  ::ripple_proto::GTID* temp = latest_start_gtid_;
  latest_start_gtid_ = nullptr;
  return temp;
}
inline ::ripple_proto::GTID* BinlogPosition::mutable_latest_start_gtid() {
  
  if (latest_start_gtid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::GTID>(GetArenaNoVirtual());
    latest_start_gtid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.latest_start_gtid)
  return latest_start_gtid_;
}
inline void BinlogPosition::set_allocated_latest_start_gtid(::ripple_proto::GTID* latest_start_gtid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latest_start_gtid_;
  }
  if (latest_start_gtid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_start_gtid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_start_gtid, submessage_arena);
    }
    
  } else {
    
  }
  latest_start_gtid_ = latest_start_gtid;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.latest_start_gtid)
}

// .ripple_proto.GTID latest_completed_gtid = 8;
inline bool BinlogPosition::has_latest_completed_gtid() const {
  return this != internal_default_instance() && latest_completed_gtid_ != nullptr;
}
inline void BinlogPosition::clear_latest_completed_gtid() {
  if (GetArenaNoVirtual() == nullptr && latest_completed_gtid_ != nullptr) {
    delete latest_completed_gtid_;
  }
  latest_completed_gtid_ = nullptr;
}
inline const ::ripple_proto::GTID& BinlogPosition::latest_completed_gtid() const {
  const ::ripple_proto::GTID* p = latest_completed_gtid_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.latest_completed_gtid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::GTID*>(
      &::ripple_proto::_GTID_default_instance_);
}
inline ::ripple_proto::GTID* BinlogPosition::release_latest_completed_gtid() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.latest_completed_gtid)
  
  ::ripple_proto::GTID* temp = latest_completed_gtid_;
  latest_completed_gtid_ = nullptr;
  return temp;
}
inline ::ripple_proto::GTID* BinlogPosition::mutable_latest_completed_gtid() {
  
  if (latest_completed_gtid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::GTID>(GetArenaNoVirtual());
    latest_completed_gtid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.latest_completed_gtid)
  return latest_completed_gtid_;
}
inline void BinlogPosition::set_allocated_latest_completed_gtid(::ripple_proto::GTID* latest_completed_gtid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latest_completed_gtid_;
  }
  if (latest_completed_gtid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_completed_gtid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_completed_gtid, submessage_arena);
    }
    
  } else {
    
  }
  latest_completed_gtid_ = latest_completed_gtid;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.latest_completed_gtid)
}

// .ripple_proto.GTIDStartPosition gtid_start_position = 9;
inline bool BinlogPosition::has_gtid_start_position() const {
  return this != internal_default_instance() && gtid_start_position_ != nullptr;
}
inline void BinlogPosition::clear_gtid_start_position() {
  if (GetArenaNoVirtual() == nullptr && gtid_start_position_ != nullptr) {
    delete gtid_start_position_;
  }
  gtid_start_position_ = nullptr;
}
inline const ::ripple_proto::GTIDStartPosition& BinlogPosition::gtid_start_position() const {
  const ::ripple_proto::GTIDStartPosition* p = gtid_start_position_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.gtid_start_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::GTIDStartPosition*>(
      &::ripple_proto::_GTIDStartPosition_default_instance_);
}
inline ::ripple_proto::GTIDStartPosition* BinlogPosition::release_gtid_start_position() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.gtid_start_position)
  
  ::ripple_proto::GTIDStartPosition* temp = gtid_start_position_;
  gtid_start_position_ = nullptr;
  return temp;
}
inline ::ripple_proto::GTIDStartPosition* BinlogPosition::mutable_gtid_start_position() {
  
  if (gtid_start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::GTIDStartPosition>(GetArenaNoVirtual());
    gtid_start_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.gtid_start_position)
  return gtid_start_position_;
}
inline void BinlogPosition::set_allocated_gtid_start_position(::ripple_proto::GTIDStartPosition* gtid_start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gtid_start_position_;
  }
  if (gtid_start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gtid_start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gtid_start_position, submessage_arena);
    }
    
  } else {
    
  }
  gtid_start_position_ = gtid_start_position;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.gtid_start_position)
}

// .ripple_proto.GTIDStartPosition gtid_purged = 10;
inline bool BinlogPosition::has_gtid_purged() const {
  return this != internal_default_instance() && gtid_purged_ != nullptr;
}
inline void BinlogPosition::clear_gtid_purged() {
  if (GetArenaNoVirtual() == nullptr && gtid_purged_ != nullptr) {
    delete gtid_purged_;
  }
  gtid_purged_ = nullptr;
}
inline const ::ripple_proto::GTIDStartPosition& BinlogPosition::gtid_purged() const {
  const ::ripple_proto::GTIDStartPosition* p = gtid_purged_;
  // @@protoc_insertion_point(field_get:ripple_proto.BinlogPosition.gtid_purged)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::GTIDStartPosition*>(
      &::ripple_proto::_GTIDStartPosition_default_instance_);
}
inline ::ripple_proto::GTIDStartPosition* BinlogPosition::release_gtid_purged() {
  // @@protoc_insertion_point(field_release:ripple_proto.BinlogPosition.gtid_purged)
  
  ::ripple_proto::GTIDStartPosition* temp = gtid_purged_;
  gtid_purged_ = nullptr;
  return temp;
}
inline ::ripple_proto::GTIDStartPosition* BinlogPosition::mutable_gtid_purged() {
  
  if (gtid_purged_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::GTIDStartPosition>(GetArenaNoVirtual());
    gtid_purged_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.BinlogPosition.gtid_purged)
  return gtid_purged_;
}
inline void BinlogPosition::set_allocated_gtid_purged(::ripple_proto::GTIDStartPosition* gtid_purged) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gtid_purged_;
  }
  if (gtid_purged) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gtid_purged = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gtid_purged, submessage_arena);
    }
    
  } else {
    
  }
  gtid_purged_ = gtid_purged;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.BinlogPosition.gtid_purged)
}

// -------------------------------------------------------------------

// MasterInfo

// .google.protobuf.StringValue user = 1;
inline bool MasterInfo::has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& MasterInfo::user() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = user_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.user)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::release_user() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.user)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = user_;
  user_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.user)
  return user_;
}
inline void MasterInfo::set_allocated_user(PROTOBUF_NAMESPACE_ID::StringValue* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.user)
}

// .google.protobuf.StringValue host = 2;
inline bool MasterInfo::has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& MasterInfo::host() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = host_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.host)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::release_host() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.host)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = host_;
  host_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaNoVirtual());
    host_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.host)
  return host_;
}
inline void MasterInfo::set_allocated_host(PROTOBUF_NAMESPACE_ID::StringValue* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host)->GetArena();
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.host)
}

// .google.protobuf.Int32Value port = 3;
inline bool MasterInfo::has_port() const {
  return this != internal_default_instance() && port_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& MasterInfo::port() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = port_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.port)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* MasterInfo::release_port() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.port)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = port_;
  port_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* MasterInfo::mutable_port() {
  
  if (port_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaNoVirtual());
    port_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.port)
  return port_;
}
inline void MasterInfo::set_allocated_port(PROTOBUF_NAMESPACE_ID::Int32Value* port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  if (port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port)->GetArena();
    if (message_arena != submessage_arena) {
      port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    
  } else {
    
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.port)
}

// .google.protobuf.StringValue protocol = 4;
inline bool MasterInfo::has_protocol() const {
  return this != internal_default_instance() && protocol_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& MasterInfo::protocol() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = protocol_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.protocol)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::release_protocol() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.protocol)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = protocol_;
  protocol_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::mutable_protocol() {
  
  if (protocol_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaNoVirtual());
    protocol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.protocol)
  return protocol_;
}
inline void MasterInfo::set_allocated_protocol(PROTOBUF_NAMESPACE_ID::StringValue* protocol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_);
  }
  if (protocol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol)->GetArena();
    if (message_arena != submessage_arena) {
      protocol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol, submessage_arena);
    }
    
  } else {
    
  }
  protocol_ = protocol;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.protocol)
}

// .google.protobuf.BoolValue semi_sync_slave_reply_enabled = 5;
inline bool MasterInfo::has_semi_sync_slave_reply_enabled() const {
  return this != internal_default_instance() && semi_sync_slave_reply_enabled_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& MasterInfo::semi_sync_slave_reply_enabled() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = semi_sync_slave_reply_enabled_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.semi_sync_slave_reply_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* MasterInfo::release_semi_sync_slave_reply_enabled() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.semi_sync_slave_reply_enabled)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = semi_sync_slave_reply_enabled_;
  semi_sync_slave_reply_enabled_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* MasterInfo::mutable_semi_sync_slave_reply_enabled() {
  
  if (semi_sync_slave_reply_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaNoVirtual());
    semi_sync_slave_reply_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.semi_sync_slave_reply_enabled)
  return semi_sync_slave_reply_enabled_;
}
inline void MasterInfo::set_allocated_semi_sync_slave_reply_enabled(PROTOBUF_NAMESPACE_ID::BoolValue* semi_sync_slave_reply_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(semi_sync_slave_reply_enabled_);
  }
  if (semi_sync_slave_reply_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(semi_sync_slave_reply_enabled)->GetArena();
    if (message_arena != submessage_arena) {
      semi_sync_slave_reply_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, semi_sync_slave_reply_enabled, submessage_arena);
    }
    
  } else {
    
  }
  semi_sync_slave_reply_enabled_ = semi_sync_slave_reply_enabled;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.semi_sync_slave_reply_enabled)
}

// .google.protobuf.BoolValue compressed_protocol = 6;
inline bool MasterInfo::has_compressed_protocol() const {
  return this != internal_default_instance() && compressed_protocol_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& MasterInfo::compressed_protocol() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = compressed_protocol_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.compressed_protocol)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* MasterInfo::release_compressed_protocol() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.compressed_protocol)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = compressed_protocol_;
  compressed_protocol_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* MasterInfo::mutable_compressed_protocol() {
  
  if (compressed_protocol_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaNoVirtual());
    compressed_protocol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.compressed_protocol)
  return compressed_protocol_;
}
inline void MasterInfo::set_allocated_compressed_protocol(PROTOBUF_NAMESPACE_ID::BoolValue* compressed_protocol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compressed_protocol_);
  }
  if (compressed_protocol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compressed_protocol)->GetArena();
    if (message_arena != submessage_arena) {
      compressed_protocol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compressed_protocol, submessage_arena);
    }
    
  } else {
    
  }
  compressed_protocol_ = compressed_protocol;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.compressed_protocol)
}

// .google.protobuf.DoubleValue heartbeat_period = 7;
inline bool MasterInfo::has_heartbeat_period() const {
  return this != internal_default_instance() && heartbeat_period_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& MasterInfo::heartbeat_period() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = heartbeat_period_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.heartbeat_period)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* MasterInfo::release_heartbeat_period() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.heartbeat_period)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = heartbeat_period_;
  heartbeat_period_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* MasterInfo::mutable_heartbeat_period() {
  
  if (heartbeat_period_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaNoVirtual());
    heartbeat_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.heartbeat_period)
  return heartbeat_period_;
}
inline void MasterInfo::set_allocated_heartbeat_period(PROTOBUF_NAMESPACE_ID::DoubleValue* heartbeat_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_period_);
  }
  if (heartbeat_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_period)->GetArena();
    if (message_arena != submessage_arena) {
      heartbeat_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_period, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_period_ = heartbeat_period;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.heartbeat_period)
}

// .google.protobuf.StringValue password = 8;
inline bool MasterInfo::has_password() const {
  return this != internal_default_instance() && password_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& MasterInfo::password() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = password_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterInfo.password)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::release_password() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterInfo.password)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = password_;
  password_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* MasterInfo::mutable_password() {
  
  if (password_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaNoVirtual());
    password_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterInfo.password)
  return password_;
}
inline void MasterInfo::set_allocated_password(PROTOBUF_NAMESPACE_ID::StringValue* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password)->GetArena();
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterInfo.password)
}

// -------------------------------------------------------------------

// MasterStatus

// .ripple_proto.MasterStatus.State state = 1;
inline void MasterStatus::clear_state() {
  state_ = 0;
}
inline ::ripple_proto::MasterStatus_State MasterStatus::state() const {
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.state)
  return static_cast< ::ripple_proto::MasterStatus_State >(state_);
}
inline void MasterStatus::set_state(::ripple_proto::MasterStatus_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.MasterStatus.state)
}

// .ripple_proto.MasterInfo master_info = 2;
inline bool MasterStatus::has_master_info() const {
  return this != internal_default_instance() && master_info_ != nullptr;
}
inline void MasterStatus::clear_master_info() {
  if (GetArenaNoVirtual() == nullptr && master_info_ != nullptr) {
    delete master_info_;
  }
  master_info_ = nullptr;
}
inline const ::ripple_proto::MasterInfo& MasterStatus::master_info() const {
  const ::ripple_proto::MasterInfo* p = master_info_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.master_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::MasterInfo*>(
      &::ripple_proto::_MasterInfo_default_instance_);
}
inline ::ripple_proto::MasterInfo* MasterStatus::release_master_info() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterStatus.master_info)
  
  ::ripple_proto::MasterInfo* temp = master_info_;
  master_info_ = nullptr;
  return temp;
}
inline ::ripple_proto::MasterInfo* MasterStatus::mutable_master_info() {
  
  if (master_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::MasterInfo>(GetArenaNoVirtual());
    master_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterStatus.master_info)
  return master_info_;
}
inline void MasterStatus::set_allocated_master_info(::ripple_proto::MasterInfo* master_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete master_info_;
  }
  if (master_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_info, submessage_arena);
    }
    
  } else {
    
  }
  master_info_ = master_info;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterStatus.master_info)
}

// int64 server_id = 3;
inline void MasterStatus::clear_server_id() {
  server_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MasterStatus::server_id() const {
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.server_id)
  return server_id_;
}
inline void MasterStatus::set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.MasterStatus.server_id)
}

// string uuid = 4;
inline void MasterStatus::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MasterStatus::uuid() const {
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.uuid)
  return uuid_.GetNoArena();
}
inline void MasterStatus::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.MasterStatus.uuid)
}
inline void MasterStatus::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.MasterStatus.uuid)
}
inline void MasterStatus::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.MasterStatus.uuid)
}
inline void MasterStatus::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.MasterStatus.uuid)
}
inline std::string* MasterStatus::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterStatus.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MasterStatus::release_uuid() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterStatus.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MasterStatus::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterStatus.uuid)
}

// .ripple_proto.ServerVersion server_version = 5;
inline bool MasterStatus::has_server_version() const {
  return this != internal_default_instance() && server_version_ != nullptr;
}
inline void MasterStatus::clear_server_version() {
  if (GetArenaNoVirtual() == nullptr && server_version_ != nullptr) {
    delete server_version_;
  }
  server_version_ = nullptr;
}
inline const ::ripple_proto::ServerVersion& MasterStatus::server_version() const {
  const ::ripple_proto::ServerVersion* p = server_version_;
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.server_version)
  return p != nullptr ? *p : *reinterpret_cast<const ::ripple_proto::ServerVersion*>(
      &::ripple_proto::_ServerVersion_default_instance_);
}
inline ::ripple_proto::ServerVersion* MasterStatus::release_server_version() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterStatus.server_version)
  
  ::ripple_proto::ServerVersion* temp = server_version_;
  server_version_ = nullptr;
  return temp;
}
inline ::ripple_proto::ServerVersion* MasterStatus::mutable_server_version() {
  
  if (server_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::ripple_proto::ServerVersion>(GetArenaNoVirtual());
    server_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterStatus.server_version)
  return server_version_;
}
inline void MasterStatus::set_allocated_server_version(::ripple_proto::ServerVersion* server_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_version_;
  }
  if (server_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_version, submessage_arena);
    }
    
  } else {
    
  }
  server_version_ = server_version;
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterStatus.server_version)
}

// bool semi_sync_master_enabled = 6;
inline void MasterStatus::clear_semi_sync_master_enabled() {
  semi_sync_master_enabled_ = false;
}
inline bool MasterStatus::semi_sync_master_enabled() const {
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.semi_sync_master_enabled)
  return semi_sync_master_enabled_;
}
inline void MasterStatus::set_semi_sync_master_enabled(bool value) {
  
  semi_sync_master_enabled_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.MasterStatus.semi_sync_master_enabled)
}

// string server_name = 7;
inline void MasterStatus::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MasterStatus::server_name() const {
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.server_name)
  return server_name_.GetNoArena();
}
inline void MasterStatus::set_server_name(const std::string& value) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.MasterStatus.server_name)
}
inline void MasterStatus::set_server_name(std::string&& value) {
  
  server_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.MasterStatus.server_name)
}
inline void MasterStatus::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.MasterStatus.server_name)
}
inline void MasterStatus::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.MasterStatus.server_name)
}
inline std::string* MasterStatus::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.MasterStatus.server_name)
  return server_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MasterStatus::release_server_name() {
  // @@protoc_insertion_point(field_release:ripple_proto.MasterStatus.server_name)
  
  return server_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MasterStatus::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.MasterStatus.server_name)
}

// bool semi_sync_slave_reply_active = 8;
inline void MasterStatus::clear_semi_sync_slave_reply_active() {
  semi_sync_slave_reply_active_ = false;
}
inline bool MasterStatus::semi_sync_slave_reply_active() const {
  // @@protoc_insertion_point(field_get:ripple_proto.MasterStatus.semi_sync_slave_reply_active)
  return semi_sync_slave_reply_active_;
}
inline void MasterStatus::set_semi_sync_slave_reply_active(bool value) {
  
  semi_sync_slave_reply_active_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.MasterStatus.semi_sync_slave_reply_active)
}

// -------------------------------------------------------------------

// SlaveAddress

// string host = 1;
inline void SlaveAddress::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SlaveAddress::host() const {
  // @@protoc_insertion_point(field_get:ripple_proto.SlaveAddress.host)
  return host_.GetNoArena();
}
inline void SlaveAddress::set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.SlaveAddress.host)
}
inline void SlaveAddress::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.SlaveAddress.host)
}
inline void SlaveAddress::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.SlaveAddress.host)
}
inline void SlaveAddress::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.SlaveAddress.host)
}
inline std::string* SlaveAddress::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.SlaveAddress.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SlaveAddress::release_host() {
  // @@protoc_insertion_point(field_release:ripple_proto.SlaveAddress.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SlaveAddress::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.SlaveAddress.host)
}

// uint32 port = 2;
inline void SlaveAddress::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlaveAddress::port() const {
  // @@protoc_insertion_point(field_get:ripple_proto.SlaveAddress.port)
  return port_;
}
inline void SlaveAddress::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.SlaveAddress.port)
}

// uint32 server_id = 3;
inline void SlaveAddress::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlaveAddress::server_id() const {
  // @@protoc_insertion_point(field_get:ripple_proto.SlaveAddress.server_id)
  return server_id_;
}
inline void SlaveAddress::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.SlaveAddress.server_id)
}

// string server_name = 4;
inline void SlaveAddress::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SlaveAddress::server_name() const {
  // @@protoc_insertion_point(field_get:ripple_proto.SlaveAddress.server_name)
  return server_name_.GetNoArena();
}
inline void SlaveAddress::set_server_name(const std::string& value) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.SlaveAddress.server_name)
}
inline void SlaveAddress::set_server_name(std::string&& value) {
  
  server_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.SlaveAddress.server_name)
}
inline void SlaveAddress::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.SlaveAddress.server_name)
}
inline void SlaveAddress::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.SlaveAddress.server_name)
}
inline std::string* SlaveAddress::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.SlaveAddress.server_name)
  return server_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SlaveAddress::release_server_name() {
  // @@protoc_insertion_point(field_release:ripple_proto.SlaveAddress.server_name)
  
  return server_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SlaveAddress::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.SlaveAddress.server_name)
}

// -------------------------------------------------------------------

// Slaves

// repeated .ripple_proto.SlaveAddress slave = 1;
inline int Slaves::slave_size() const {
  return slave_.size();
}
inline void Slaves::clear_slave() {
  slave_.Clear();
}
inline ::ripple_proto::SlaveAddress* Slaves::mutable_slave(int index) {
  // @@protoc_insertion_point(field_mutable:ripple_proto.Slaves.slave)
  return slave_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::SlaveAddress >*
Slaves::mutable_slave() {
  // @@protoc_insertion_point(field_mutable_list:ripple_proto.Slaves.slave)
  return &slave_;
}
inline const ::ripple_proto::SlaveAddress& Slaves::slave(int index) const {
  // @@protoc_insertion_point(field_get:ripple_proto.Slaves.slave)
  return slave_.Get(index);
}
inline ::ripple_proto::SlaveAddress* Slaves::add_slave() {
  // @@protoc_insertion_point(field_add:ripple_proto.Slaves.slave)
  return slave_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ripple_proto::SlaveAddress >&
Slaves::slave() const {
  // @@protoc_insertion_point(field_list:ripple_proto.Slaves.slave)
  return slave_;
}

// -------------------------------------------------------------------

// OnOff

// bool on = 1;
inline void OnOff::clear_on() {
  on_ = false;
}
inline bool OnOff::on() const {
  // @@protoc_insertion_point(field_get:ripple_proto.OnOff.on)
  return on_;
}
inline void OnOff::set_on(bool value) {
  
  on_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.OnOff.on)
}

// -------------------------------------------------------------------

// Status

// int32 code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:ripple_proto.Status.code)
  return code_;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ripple_proto.Status.code)
}

// string info = 2;
inline void Status::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Status::info() const {
  // @@protoc_insertion_point(field_get:ripple_proto.Status.info)
  return info_.GetNoArena();
}
inline void Status::set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.Status.info)
}
inline void Status::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.Status.info)
}
inline void Status::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.Status.info)
}
inline void Status::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.Status.info)
}
inline std::string* Status::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.Status.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Status::release_info() {
  // @@protoc_insertion_point(field_release:ripple_proto.Status.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.Status.info)
}

// -------------------------------------------------------------------

// RippleInfo

// string server_name = 1;
inline void RippleInfo::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RippleInfo::server_name() const {
  // @@protoc_insertion_point(field_get:ripple_proto.RippleInfo.server_name)
  return server_name_.GetNoArena();
}
inline void RippleInfo::set_server_name(const std::string& value) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ripple_proto.RippleInfo.server_name)
}
inline void RippleInfo::set_server_name(std::string&& value) {
  
  server_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ripple_proto.RippleInfo.server_name)
}
inline void RippleInfo::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ripple_proto.RippleInfo.server_name)
}
inline void RippleInfo::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ripple_proto.RippleInfo.server_name)
}
inline std::string* RippleInfo::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:ripple_proto.RippleInfo.server_name)
  return server_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RippleInfo::release_server_name() {
  // @@protoc_insertion_point(field_release:ripple_proto.RippleInfo.server_name)
  
  return server_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RippleInfo::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:ripple_proto.RippleInfo.server_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ripple_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ripple_proto::MasterStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ripple_proto::MasterStatus_State>() {
  return ::ripple_proto::MasterStatus_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_management_2eproto
